interactions:
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - python-requests/2.31.0
    method: GET
    uri: https://api.semanticscholar.org/graph/v1/author/search?query=Bjarne%20Stroustrup&fields=affiliations,aliases,authorId,citationCount,externalIds,hIndex,homepage,name,paperCount,papers,papers.abstract,papers.authors,papers.citationCount,papers.corpusId,papers.externalIds,papers.fieldsOfStudy,papers.influentialCitationCount,papers.isOpenAccess,papers.journal,papers.openAccessPdf,papers.paperId,papers.publicationDate,papers.publicationTypes,papers.publicationVenue,papers.referenceCount,papers.s2FieldsOfStudy,papers.title,papers.url,papers.venue,papers.year,url&offset=0&limit=1000
  response:
    body:
      string: '{"total": 6, "offset": 0, "data": [{"authorId": "1706320", "externalIds":
        {"DBLP": ["Bjarne Stroustrup"]}, "url": "https://www.semanticscholar.org/author/1706320",
        "name": "B. Stroustrup", "aliases": ["B. Stroustrup", "Bjarne Stroustrup"],
        "affiliations": [], "homepage": null, "paperCount": 142, "citationCount":
        14492, "hIndex": 29, "papers": [{"paperId": "1c2688189548fecf0a030cad80b4cd3dbf98e0bc",
        "externalIds": {"MAG": "3035227709", "DBLP": "journals/pacmpl/Stroustrup20",
        "DOI": "10.1145/3386320", "CorpusId": 219603741}, "corpusId": 219603741, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/1c2688189548fecf0a030cad80b4cd3dbf98e0bc",
        "title": "Thriving in a crowded and changing world: C++ 2006\u20132020", "abstract":
        "By 2006, C++ had been in widespread industrial use for 20 years. It contained
        parts that had survived unchanged since introduced into C in the early 1970s
        as well as features that were novel in the early 2000s. From 2006 to 2020,
        the C++ developer community grew from about 3 million to about 4.5 million.
        It was a period where new programming models emerged, hardware architectures
        evolved, new application domains gained massive importance, and quite a few
        well-financed and professionally marketed languages fought for dominance.
        How did C++ -- an older language without serious commercial backing -- manage
        to thrive in the face of all that? This paper focuses on the major changes
        to the ISO C++ standard for the 2011, 2014, 2017, and 2020 revisions. The
        standard library is about 3/4 of the C++20 standard, but this paper''s primary
        focus is on language features and the programming techniques they support.
        The paper contains long lists of features documenting the growth of C++. Significant
        technical points are discussed and illustrated with short code fragments.
        In addition, it presents some failed proposals and the discussions that led
        to their failure. It offers a perspective on the bewildering flow of facts
        and features across the years. The emphasis is on the ideas, people, and processes
        that shaped the language. Themes include efforts to preserve the essence of
        C++ through evolutionary changes, to simplify its use, to improve support
        for generic programming, to better support compile-time programming, to extend
        support for concurrency and parallel programming, and to maintain stable support
        for decades'' old code. The ISO C++ standard evolves through a consensus process.
        Inevitably, there is competition among proposals and clashes (usually polite
        ones) over direction, design philosophies, and principles. The committee is
        now larger and more active than ever, with as many as 250 people turning up
        to week-long meetings three times a year and many more taking part electronically.
        We try (not always successfully) to mitigate the effects of design by committee,
        bureaucratic paralysis, and excessive enthusiasm for a variety of language
        fashions. Specific language-technical topics include the memory model, concurrency
        and parallelism, compile-time computation, move-semantics, exceptions, lambda
        expressions, and modules. Designing a mechanism for specifying a template''s
        requirements on its arguments that is sufficiently flexible and precise yet
        doesn''t impose run-time costs turned out to be hard. The repeated attempts
        to design ``concepts'''' to do that have their roots back in the 1980s and
        touch upon many key design issues for C++ and for generic programming. The
        description is based on personal participation in the key events and design
        decisions, backed by the thousands of papers and hundreds of meeting minutes
        in the ISO C++ standards committee''s archives.", "venue": "Proc. ACM Program.
        Lang.", "year": 2020, "referenceCount": 234, "citationCount": 7, "influentialCitationCount":
        0, "isOpenAccess": true, "openAccessPdf": {"url": "https://dl.acm.org/doi/pdf/10.1145/3386320",
        "status": null}, "fieldsOfStudy": ["Computer Science", "Business"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Business",
        "source": "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle"], "publicationDate": "2020-06-12", "journal":
        {"volume": "4", "pages": "1 - 168", "name": "Proceedings of the ACM on Programming
        Languages"}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "64dac1f22dc8a0d857b812e715e50077ce48cea0", "externalIds": {"CorpusId":
        211479794}, "corpusId": 211479794, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/64dac1f22dc8a0d857b812e715e50077ce48cea0",
        "title": "Reflection on Attributes", "abstract": "Current reflection proposals
        do not propose to reflect on attributes. However we think it is a powerful
        feature to have as attributes combined with reflection can enable important
        use cases, as filtering and augmenting entities with additional information.
        Unfortunately, attributes are only identified by their names, and if they
        accept parameters, the parameters form a balanced token sequence, which makes
        it impossible for individual parameters to be extracted from within a program.
        We introduce the notion of user-defined attributes and a typesafe mechanism
        to reflect on these attributes and their parameters at compile time.", "venue":
        "", "year": 2020, "referenceCount": 1, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "s2-fos-model"}, {"category":
        "Geology", "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate":
        null, "journal": null, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "e7bd466d1c2b7fea00789fc6bef2e2abed3351f2", "externalIds": {"CorpusId":
        124422980}, "corpusId": 124422980, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/e7bd466d1c2b7fea00789fc6bef2e2abed3351f2",
        "title": "Lambda expressions and closures for C++", "abstract": "This proposal
        describes a design for direct support for lambda expressions in C++. The design
        space for lambda expressions is large, and involves many tradeoffs. We include
        a thorough discussion of the benefits and the drawbacks of our design. In
        addition, we describe several other viable alternatives that warrant consideration.",
        "venue": "", "year": 2018, "referenceCount": 21, "citationCount": 7, "influentialCitationCount":
        1, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [{"category": "Art", "source": "s2-fos-model"}], "publicationTypes": null,
        "publicationDate": null, "journal": null, "authors": [{"authorId": "144233173",
        "name": "Jeremiah Willcock"}, {"authorId": "2832673", "name": "Jaakko J\u00e4rvi"},
        {"authorId": "2956177", "name": "Douglas P. Gregor"}, {"authorId": "1706320",
        "name": "B. Stroustrup"}, {"authorId": "143962909", "name": "A. Lumsdaine"}]},
        {"paperId": "18e399b8dba7e36e013c6e2d8709845dac55087b", "externalIds": {"MAG":
        "2545204576", "CorpusId": 62937463}, "corpusId": 62937463, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/18e399b8dba7e36e013c6e2d8709845dac55087b",
        "title": "The C++ Programming Language\u201d, 3rd Edition, Pearson Education,
        2007", "abstract": null, "venue": "", "year": 2015, "referenceCount": 0, "citationCount":
        10, "influentialCitationCount": 3, "isOpenAccess": false, "openAccessPdf":
        null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category":
        "Computer Science", "source": "external"}, {"category": "Education", "source":
        "s2-fos-model"}], "publicationTypes": null, "publicationDate": "2015-01-17",
        "journal": {"volume": "", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}, {"authorId": "1752506", "name": "M. Weiss"}]}, {"paperId":
        "1a84826ad4968082761952b7ef0f5f6bc65f39e7", "externalIds": {"MAG": "3013686123",
        "CorpusId": 37407326}, "corpusId": 37407326, "publicationVenue": null, "url":
        "https://www.semanticscholar.org/paper/1a84826ad4968082761952b7ef0f5f6bc65f39e7",
        "title": "Improving performance and maintainability through refactoring in
        C++11", "abstract": "J. Daniel Garcia''s work was partially supported by Fundacion
        CajaMadrid through their grant programme for Madrid University Professors.
        Bjarne Stroustrup''s work was partially supported by NSF grant #0833199",
        "venue": "", "year": 2015, "referenceCount": 30, "citationCount": 3, "influentialCitationCount":
        1, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Engineering"],
        "s2FieldsOfStudy": [{"category": "Engineering", "source": "external"}, {"category":
        "History", "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate":
        "2015-08-27", "journal": {"volume": "", "name": ""}, "authors": [{"authorId":
        "2101499", "name": "Jos\u00e9 Daniel Garc\u00eda S\u00e1nchez"}, {"authorId":
        "1706320", "name": "B. Stroustrup"}]}, {"paperId": "1cd7db9c5b0fa292941a834a8cda55b7a8d82cd2",
        "externalIds": {"DBLP": "conf/ecoop/Stroustrup15", "MAG": "2256290542", "DOI":
        "10.4230/LIPIcs.ECOOP.2015.1", "CorpusId": 29207209}, "corpusId": 29207209,
        "publicationVenue": {"id": "b664ddb8-e5a5-4e6c-a234-3c402b801778", "name":
        "European Conference on Object-Oriented Programming", "type": "conference",
        "alternate_names": ["ECOOP", "Eur Conf Object-oriented Program"], "url": "http://www.ecoop.org/"},
        "url": "https://www.semanticscholar.org/paper/1cd7db9c5b0fa292941a834a8cda55b7a8d82cd2",
        "title": "Object-Oriented Programming without Inheritance (Invited Talk)",
        "abstract": "Object-oriented programming is often characterized as encapsulation
        plus polymorphism plus inheritance. The original Simula67 demonstrated that
        we could do without encapsulation and Kristen Nygaard insisted that some OOP
        could be done without inheritance. I present generic programming as providing
        encapsulation plus polymorphism. In C++, this view is directly supported by
        language facilities, such as classes, templates and (only recently) concepts.
        I show a range of type-and-resource-safe techniques covering a wide range
        of applications including containers, algebraic concepts, and numerical and
        non-numerical algorithms.", "venue": "European Conference on Object-Oriented
        Programming", "year": 2015, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": null,
        "journal": {"pages": "1-1"}, "authors": [{"authorId": "1706320", "name": "B.
        Stroustrup"}]}, {"paperId": "738ad38b3de6b717d53db522258d87a52c5a5654", "externalIds":
        {"MAG": "2432278907", "CorpusId": 64340043}, "corpusId": 64340043, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/738ad38b3de6b717d53db522258d87a52c5a5654",
        "title": "A brief introduction to C++''s model for type- and resource-safety",
        "abstract": "You can write C++ programs that are statically type safe and
        have no resource leaks. You can do that simply, without loss of performance,
        and without limiting C++\u2019s expressive power. This model for typeand resource-safe
        C++ has been implemented using a combination of ISO standard C++ language
        facilities, static analysis, and a tiny support library (written in ISO standard
        C++). This supports the general thesis that garbage collection is neither
        necessary nor sufficient for quality software. This paper describes the techniques
        used to eliminate dangling pointers and to ensure resource safety. Other aspects
        \u2013 also necessary for safe and effective use of C++ \u2013 have conventional
        solutions so they are mentioned only briefly here. The techniques and facilities
        presented are supported by the Core C++ Guidelines [Stroustrup,2015] and enforced
        by a static analysis tool for those [Sutter,2015].", "venue": "", "year":
        2015, "referenceCount": 1, "citationCount": 8, "influentialCitationCount":
        1, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": null, "journal": {"volume": "",
        "name": ""}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"},
        {"authorId": "2059908797", "name": "Morgan Stanley"}, {"authorId": "49949672",
        "name": "H. Sutter"}, {"authorId": "145668248", "name": "G. D. Reis"}]}, {"paperId":
        "b002528c1c9c74e428f7b50f854e21293176d372", "externalIds": {"MAG": "135093252",
        "CorpusId": 58772304}, "corpusId": 58772304, "publicationVenue": null, "url":
        "https://www.semanticscholar.org/paper/b002528c1c9c74e428f7b50f854e21293176d372",
        "title": "C programming language third edition", "abstract": "provides an
        Introduction to the C Programming Language. en.wikipedia.org /wiki/ Assembly
        Language Step-by-Step Programming with Linux, 3rd Edition H. Python programming
        for the absolute beginner, 3rd edition C programming for the and easy c programming
        guide (c programming, c programming language. Robert Seacord introduces the
        second edition of The CERT C Coding Standard: 98 Rules for Developing Safe,
        Programming LanguagesC, Third Edition.", "venue": "", "year": 2015, "referenceCount":
        0, "citationCount": 21, "influentialCitationCount": 3, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate":
        null, "journal": {"volume": "", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}, {"authorId": "1847322", "name": "B. Kernighan"},
        {"authorId": "50131942", "name": "M. Gr\u00e9goire"}, {"authorId": "3491393",
        "name": "G. Riley"}, {"authorId": "49794751", "name": "J. Giarratano"}]},
        {"paperId": "363b5e14a67440746fc7ee091ce28d34e49cef87", "externalIds": {"MAG":
        "2226580825", "CorpusId": 61621100}, "corpusId": 61621100, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/363b5e14a67440746fc7ee091ce28d34e49cef87",
        "title": "Programming: Principles and Practice Using C++ (2nd Edition)", "abstract":
        "An Introduction to Programming by the Inventor of C++ Preparation for Programming
        in the Real World The book assumes that you aim eventually to write non-trivial
        programs, whether for work in software development or in some other technical
        field. Focus on Fundamental Concepts and Techniques The book explains fundamental
        concepts and techniques in greater depth than traditional introductions. This
        approach will give you a solid foundation for writing useful, correct, maintainable,
        and efficient code. Programming with Todays C++ (C++11 and C++14) The book
        is an introduction to programming in general, including object-oriented programming
        and generic programming. It is also a solid introduction to the C++ programming
        language, one of the most widely used languages for real-world software. The
        book presents modern C++ programming techniques from the start, introducing
        the C++ standard library and C++11 and C++14 features to simplify programming
        tasks. For Beginners And Anyone Who Wants to Learn Something New The book
        is primarily designed for people who have never programmed before, and it
        has been tested with many thousands of first-year university students. It
        has also been extensively used for self-study. Also, practitioners and advanced
        students have gained new insight and guidance by seeing how a master approaches
        the elements of his art. Provides a Broad View The first half of the book
        covers a wide range of essential concepts, design and programming techniques,
        language features, and libraries. Those will enable you to write programs
        involving input, output, computation, and simple graphics. The second half
        explores more specialized topics (such as text processing, testing, and the
        C programming language) and provides abundant reference material. Source code
        and support supplements are available from the authors website.", "venue":
        "", "year": 2014, "referenceCount": 45, "citationCount": 15, "influentialCitationCount":
        1, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": "2014-06-02", "journal": {"volume":
        "", "name": ""}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "391c58a1a7510f6c975d29349705b1058bb05efc", "externalIds": {"MAG":
        "2124080172", "DOI": "10.1145/2517208.2517222", "CorpusId": 61246126}, "corpusId":
        61246126, "publicationVenue": {"id": "42ba2c5a-a60c-4306-988d-ff0928f95afa",
        "name": "International Conference on Generative Programming: Concepts and
        Experiences", "type": "conference", "alternate_names": ["Generative Programming
        and Component Engineering", "Gener Program Compon Eng", "GPCE", "Int Conf
        Gener Program Concept Exp"], "url": "https://dl.acm.org/conference/gpce"},
        "url": "https://www.semanticscholar.org/paper/391c58a1a7510f6c975d29349705b1058bb05efc",
        "title": "Open pattern matching for C++", "abstract": "Pattern matching is
        an abstraction mechanism that can greatly simplify source code. We present
        functional-style pattern matching for C++ implemented as a library, called
        Mach71. All the patterns are user-definable, can be stored in variables, passed
        among functions, and allow the use of class hierarchies. As an example, we
        implement common patterns used in functional languages.\n Our approach to
        pattern matching is based on compile-time composition of pattern objects through
        concepts. This is superior (in terms of performance and expressiveness) to
        approaches based on run-time composition of polymorphic pattern objects. In
        particular, our solution allows mapping functional code based on pattern matching
        directly into C++ and produces code that is only a few percent slower than
        hand-optimized C++ code.\n The library uses an efficient type switch construct,
        further extending it to multiple scrutinees and general patterns. We compare
        the performance of pattern matching to that of double dispatch and open multi-methods
        in C++.", "venue": "International Conference on Generative Programming: Concepts
        and Experiences", "year": 2014, "referenceCount": 38, "citationCount": 6,
        "influentialCitationCount": 0, "isOpenAccess": false, "openAccessPdf": null,
        "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category": "Computer
        Science", "source": "external"}, {"category": "Computer Science", "source":
        "s2-fos-model"}], "publicationTypes": null, "publicationDate": "2014-03-05",
        "journal": {"volume": "49", "pages": "33-42", "name": "Sigplan Notices"},
        "authors": [{"authorId": "2307401", "name": "Yuriy Solodkyy"}, {"authorId":
        "2114948533", "name": "G. Dos Reis"}, {"authorId": "1706320", "name": "B.
        Stroustrup"}]}, {"paperId": "6d5d774581a74ded889569249b0fa62f07ad2e7b", "externalIds":
        {"MAG": "2020104585", "DBLP": "conf/gpce/SolodkyyRS13", "DOI": "10.1145/2508075.2508098",
        "CorpusId": 11261697}, "corpusId": 11261697, "publicationVenue": {"id": "a771789a-19af-47af-b65e-a7ddd8cb9ea7",
        "name": "ACM SIGPLAN International Conference on Systems, Programming, Languages
        and Applications: Software for Humanity", "type": "conference", "alternate_names":
        ["ACM conf Syst Program Lang Appl Softw Humanit", "SPLASH", "ACM SIGPLAN Int
        Conf Syst Program Lang Appl Softw Humanit", "Splash", "ACM conference on Systems,
        Programming, Languages and Applications: Software for Humanity"], "issn":
        "1022-890X", "url": "http://www.splashcon.org/"}, "url": "https://www.semanticscholar.org/paper/6d5d774581a74ded889569249b0fa62f07ad2e7b",
        "title": "Open pattern matching for C++", "abstract": "Pattern matching is
        an abstraction mechanism that can greatly simplify source code. We present
        functional-style pattern matching for C++ implemented as a library, called
        Mach7. All the patterns are user-definable, can be stored in variables, passed
        among functions, and allow the use of open class hierarchies. As an example,
        we implement common patterns used in functional languages.", "venue": "ACM
        SIGPLAN International Conference on Systems, Programming, Languages and Applications:
        Software for Humanity", "year": 2013, "referenceCount": 50, "citationCount":
        12, "influentialCitationCount": 2, "isOpenAccess": false, "openAccessPdf":
        null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category":
        "Computer Science", "source": "external"}, {"category": "Computer Science",
        "source": "s2-fos-model"}], "publicationTypes": ["Book", "JournalArticle"],
        "publicationDate": "2013-10-26", "journal": {"name": "Proceedings of the 2013
        companion publication for conference on Systems, programming, & applications:
        software for humanity"}, "authors": [{"authorId": "2307401", "name": "Yuriy
        Solodkyy"}, {"authorId": "145668248", "name": "G. D. Reis"}, {"authorId":
        "1706320", "name": "B. Stroustrup"}]}, {"paperId": "6e1b971eab8db0efbd9e91c744821d251c224b58",
        "externalIds": {"MAG": "2165379315", "CorpusId": 10961304}, "corpusId": 10961304,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/6e1b971eab8db0efbd9e91c744821d251c224b58",
        "title": "Simplifying the analysis of c++ programs", "abstract": "Based on
        our experience of working with different C++ front ends, this thesis identifies
        numerous problems that complicate the analysis of C++ programs along the entire
        spectrum of analysis applications. We utilize library, language, and tool
        extensions to address these problems and offer solutions to many of them.
        In particular, we present efficient, expressive and non-intrusive means of
        dealing with abstract syntax trees of a program, which together render the
        visitor design pattern obsolete. We further extend C++ with open multi-methods
        to deal with the broader expression problem. Finally, we offer two techniques,
        one based on refining the type system of a language and the other on abstract
        interpretation, both of which allow developers to statically ensure or verify
        various run-time properties of their programs without having to deal with
        the full language semantics or even the abstract syntax tree of a program.
        Together, the solutions presented in this thesis make ensuring properties
        of interest about C++ programs available to average language users.", "venue":
        "", "year": 2013, "referenceCount": 255, "citationCount": 3, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": null, "journal": {"volume": "",
        "name": ""}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"},
        {"authorId": "2307401", "name": "Yuriy Solodkyy"}]}, {"paperId": "86393d134b504c19170964381be6288c0b02919e",
        "externalIds": {"CorpusId": 261509884}, "corpusId": 261509884, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/86393d134b504c19170964381be6288c0b02919e",
        "title": "Concepts Lite: Constraining Templates with Predicates", "abstract":
        "In this paper, we introduce template constraints (a.k.a., \u201cconcepts
        lite\u201d), an extension of C++ that allows the use of predicates to constrain
        template arguments. The proposed feature is minimal, principled, and uncomplicated.
        Template constraints are applied to enforce the correctness of template use,
        not the correctness of template definitions. The design of these features
        is intended to support easy and incremental adoption by users. More precisely,
        constraints:", "venue": "", "year": 2013, "referenceCount": 14, "citationCount":
        7, "influentialCitationCount": 0, "isOpenAccess": false, "openAccessPdf":
        null, "fieldsOfStudy": null, "s2FieldsOfStudy": [{"category": "Computer Science",
        "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate": null,
        "journal": null, "authors": [{"authorId": "2237593668", "name": "Andrew Sutton"},
        {"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId": "9952059f76e084d1cdee7bd4188e921f97654cb2",
        "externalIds": {"MAG": "2911391655", "CorpusId": 64734963}, "corpusId": 64734963,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/9952059f76e084d1cdee7bd4188e921f97654cb2",
        "title": "The C++ Programming Language (hardcover)", "abstract": "The new
        C++11 standard allows programmers to express ideas more clearly, simply, and
        directly, and to write faster, more efficient code. Bjarne Stroustrup, the
        designer and original implementer of C++, has reorganized, extended, and completely
        rewritten his definitive reference and tutorial for programmers who want to
        use C++ most effectively. The C++ Programming Language, Fourth Edition, delivers
        meticulous, richly explained, and integrated coverage of the entire languageits
        facilities, abstraction mechanisms, standard libraries, and key design techniques.
        Throughout, Stroustrup presents concise, pure C++11 examples, which have been
        carefully crafted to clarify both usage and program design. To promote deeper
        understanding, the author provides extensive cross-references, both within
        the book and to the ISO standard. New C++11 coverage includes Support for
        concurrency Regular expressions, resource management pointers, random numbers,
        and improved containers General and uniform initialization, simplified for-statements,
        move semantics, and Unicode support Lambdas, general constant expressions,
        control over class defaults, variadic templates, template aliases, and user-defined
        literals Compatibility issues Topics addressed in this comprehensive book
        include Basic facilities: type, object, scope, storage, computation fundamentals,
        and more Modularity, as supported by namespaces, source files, and exception
        handling C++ abstraction, including classes, class hierarchies, and templates
        in support of a synthesis of traditional programming, object-oriented programming,
        and generic programming Standard Library: containers, algorithms, iterators,
        utilities, strings, stream I/O, locales, numerics, and more The C++ basic
        memory model, in depth This fourth edition makes C++11 thoroughly accessible
        to programmers moving from C++98 or other languages, while introducing insights
        and techniques that even cutting-edge C++11 programmers will find indispensable.
        This is a hardcover version of the Fourth Edition. Content in this hardcover
        and the paperback version is identical. This book features an enhanced, layflat
        binding, which allows the book to stay open more easily when placed on a flat
        surface. This special binding methodnoticeable by a small space inside the
        spinealso increases durability.", "venue": "", "year": 2013, "referenceCount":
        0, "citationCount": 0, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["Review"], "publicationDate":
        "2013-08-03", "journal": {"volume": "", "name": ""}, "authors": [{"authorId":
        "1706320", "name": "B. Stroustrup"}]}, {"paperId": "dc2f57bfcd9d2d66f5ac865e70c46a5f0a25c973",
        "externalIds": {"MAG": "2923907867", "CorpusId": 108352263}, "corpusId": 108352263,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/dc2f57bfcd9d2d66f5ac865e70c46a5f0a25c973",
        "title": "The C++ Programming Language, 4th Edition", "abstract": "From the
        Publisher: \nThis is a complete rewrite of the most widely read and most trusted
        book on C++. Based on the ANSI/ISO C++ final draft, this book covers the C++
        language, its standard library, and key design techniques as an integrated
        whole. The C++ Programming Language provides comprehensive coverage of C++
        language features and standard library components. With this third edition,
        Stroustrup makes C++ even more accessible to those new to the language while
        adding information and techniques that even expert C++ programmers will find
        invaluable.", "venue": "", "year": 2013, "referenceCount": 0, "citationCount":
        259, "influentialCitationCount": 18, "isOpenAccess": false, "openAccessPdf":
        null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category":
        "Computer Science", "source": "external"}, {"category": "Computer Science",
        "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate": "2013-05-19",
        "journal": {"volume": "", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "de53a09e00d2d3b325a9d0483e39b240ea42e86d",
        "externalIds": {"MAG": "2950380841", "CorpusId": 189449760}, "corpusId": 189449760,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/de53a09e00d2d3b325a9d0483e39b240ea42e86d",
        "title": "A Tour of C", "abstract": null, "venue": "", "year": 2013, "referenceCount":
        0, "citationCount": 6, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}], "publicationTypes":
        null, "publicationDate": "2013-09-16", "journal": {"volume": "", "name": ""},
        "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId":
        "3ee45f31a74d34ec99da29c1d6ef5d987075c917", "externalIds": {"DBLP": "conf/oopsla/SolodkyyRS12",
        "MAG": "2137857582", "DOI": "10.1145/2384616.2384686", "CorpusId": 5180423},
        "corpusId": 5180423, "publicationVenue": {"id": "de124794-a8b5-43ce-b740-7643c17bb1ea",
        "name": "Conference on Object-Oriented Programming Systems, Languages, and
        Applications", "type": "conference", "alternate_names": ["OOPSLA", "Conf Object-oriented
        Program Syst Lang Appl"]}, "url": "https://www.semanticscholar.org/paper/3ee45f31a74d34ec99da29c1d6ef5d987075c917",
        "title": "Open and efficient type switch for C++", "abstract": "Selecting
        operations based on the run-time type of an object is key to many object-oriented
        and functional programming techniques. We present a technique for implementing
        open and efficient type switching on hierarchical extensible data types. The
        technique is general and copes well with C++ multiple inheritance. To simplify
        experimentation and gain realistic performance using production-quality compilers
        and tool chains, we implement a type switch construct as an ISO C++11 library,
        called Mach7. This library-only implementation provides concise notation and
        outperforms the visitor design pattern, commonly used for case analysis on
        types in object-oriented programming. For closed sets of types, its performance
        roughly equals equivalent code in functional languages, such as OCaml and
        Haskell. The type-switching code is easier to use and is more expressive than
        hand-coded visitors are. The library is non-intrusive and circumvents most
        of the extensibility restrictions typical of the visitor design pattern. It
        was motivated by applications involving large, typed, abstract syntax trees.",
        "venue": "Conference on Object-Oriented Programming Systems, Languages, and
        Applications", "year": 2012, "referenceCount": 61, "citationCount": 11, "influentialCitationCount":
        1, "isOpenAccess": true, "openAccessPdf": {"url": "http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2012/n3449.pdf",
        "status": null}, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"],
        "publicationDate": "2012-10-19", "journal": {"pages": "963-982"}, "authors":
        [{"authorId": "2307401", "name": "Yuriy Solodkyy"}, {"authorId": "145668248",
        "name": "G. D. Reis"}, {"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "48db89589ab1d387b6522abd6bc21c4cc0704804", "externalIds": {"MAG":
        "2294471056", "DBLP": "conf/icsm/KumarSS12a", "DOI": "10.1109/ICSM.2012.6405347",
        "CorpusId": 9857778}, "corpusId": 9857778, "publicationVenue": {"id": "7c0dee4b-efbb-4e03-b989-2e5f66dc00f4",
        "name": "International Conference on Smart Multimedia", "type": "conference",
        "alternate_names": ["Int Conf Smart Multimedia", "Int Conf Softw Maint", "ICSM",
        "International Conference and Seminar on Micro/Nanotechnologies and Electron
        Devices", "Int Conf Semin Micro/nanotechnologies Electron Device", "International
        Conference on Software Maintenance"]}, "url": "https://www.semanticscholar.org/paper/48db89589ab1d387b6522abd6bc21c4cc0704804",
        "title": "The demacrofier", "abstract": "C++ programs can be rejuvenated by
        replacing error-prone usage of the C Preprocessor macros with type safe C++11
        declarations. We have developed a classification of macros that directly maps
        to corresponding C++11 expressions, statements, and declarations. We have
        built a set of tools that replaces macros with equivalent C++ declarations
        and iteratively introduces the refactorings into the software build.", "venue":
        "International Conference on Smart Multimedia", "year": 2012, "referenceCount":
        13, "citationCount": 3, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle",
        "Conference"], "publicationDate": "2012-09-23", "journal": {"pages": "658-661",
        "name": "2012 28th IEEE International Conference on Software Maintenance (ICSM)"},
        "authors": [{"authorId": "2145751247", "name": "Aditya Kumar"}, {"authorId":
        "144144728", "name": "A. Sutton"}, {"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "a6aec2be2422b6c300f95b9c90a7b560b308e120", "externalIds": {"MAG":
        "2185972537", "CorpusId": 15866228}, "corpusId": 15866228, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/a6aec2be2422b6c300f95b9c90a7b560b308e120",
        "title": "A Concept Design for the STL", "abstract": "This report presents
        a concept design for the algorithms part of the STL and outlines the design
        of the supporting language mechanism. Both are radical simplifications of
        what was proposed in the C++0x draft. In particular, this design consists
        of only 41 concepts (including supporting concepts), does not require concept
        maps, and (perhaps most importantly) does not resemble template metaprogramming.",
        "venue": "", "year": 2012, "referenceCount": 34, "citationCount": 23, "influentialCitationCount":
        3, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": null, "journal": {"volume": "",
        "name": ""}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"},
        {"authorId": "144144728", "name": "A. Sutton"}, {"authorId": "144144728",
        "name": "A. Sutton"}, {"authorId": "1871039", "name": "Larisse Voufo"}, {"authorId":
        "122981926", "name": "Marcin Zalewski"}]}, {"paperId": "c53e9984c66db460c2005256a1028117ca00faef",
        "externalIds": {"DBLP": "conf/esop/Stroustrup12", "MAG": "173515685", "DOI":
        "10.1007/978-3-642-28869-2_1", "CorpusId": 39612530}, "corpusId": 39612530,
        "publicationVenue": {"id": "89a946e2-e2c0-440a-8897-3eaaad3ecc54", "name":
        "European Symposium on Programming", "type": "conference", "alternate_names":
        ["ESOP", "Eur Symp Program"], "url": "https://link.springer.com/conference/esop"},
        "url": "https://www.semanticscholar.org/paper/c53e9984c66db460c2005256a1028117ca00faef",
        "title": "Foundations of C++", "abstract": null, "venue": "European Symposium
        on Programming", "year": 2012, "referenceCount": 20, "citationCount": 22,
        "influentialCitationCount": 0, "isOpenAccess": true, "openAccessPdf": {"url":
        "https://link.springer.com/content/pdf/10.1007%2F978-3-642-28869-2_1.pdf",
        "status": null}, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle",
        "Conference"], "publicationDate": "2012-03-24", "journal": {"pages": "1-25"},
        "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId":
        "de91c41c6335f1541d2c56b25711629ce7f8b552", "externalIds": {"MAG": "2110331264",
        "DBLP": "conf/icsm/KumarSS12", "DOI": "10.1109/ICSM.2012.6405259", "CorpusId":
        10832416}, "corpusId": 10832416, "publicationVenue": {"id": "7c0dee4b-efbb-4e03-b989-2e5f66dc00f4",
        "name": "International Conference on Smart Multimedia", "type": "conference",
        "alternate_names": ["Int Conf Smart Multimedia", "Int Conf Softw Maint", "ICSM",
        "International Conference and Seminar on Micro/Nanotechnologies and Electron
        Devices", "Int Conf Semin Micro/nanotechnologies Electron Device", "International
        Conference on Software Maintenance"]}, "url": "https://www.semanticscholar.org/paper/de91c41c6335f1541d2c56b25711629ce7f8b552",
        "title": "Rejuvenating C++ programs through demacrofication", "abstract":
        "We describe how legacy C++ programs can be rejuvenated using C++11 features
        such as generalized constant expressions, perfect forwarding, and lambda expressions.
        In general, this work develops a correspondence between different kinds of
        macros and the C++ declarations to which they should be transformed. We have
        created a set of demacrofication tools to assist a developer in the rejuvenation
        of C++ programs. To evaluate the work, we have applied the rejuvenation tools
        to a number of C++ libraries to assess the extent to which these libraries
        might be improved by demacrofication. Results indicate that between 68 and
        98% of potentially refactorable macros could be transformed into C++11 declarations.
        Additional experiments demonstrate why these numbers are not readily achieved
        using fully automated rejuvenation tools. We also discuss some techniques
        to further assist in automating rejuvenation process.", "venue": "International
        Conference on Smart Multimedia", "year": 2012, "referenceCount": 38, "citationCount":
        25, "influentialCitationCount": 4, "isOpenAccess": false, "openAccessPdf":
        null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category":
        "Computer Science", "source": "external"}, {"category": "Computer Science",
        "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle", "Conference"],
        "publicationDate": "2012-09-23", "journal": {"pages": "98-107", "name": "2012
        28th IEEE International Conference on Software Maintenance (ICSM)"}, "authors":
        [{"authorId": "2145751247", "name": "Aditya Kumar"}, {"authorId": "144144728",
        "name": "A. Sutton"}, {"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "eb24f14677fab1ae65c3f558c899c2c256c147ae", "externalIds": {"MAG":
        "2024661677", "DBLP": "journals/computer/Stroustrup12", "DOI": "10.1109/MC.2011.353",
        "CorpusId": 8868740}, "corpusId": 8868740, "publicationVenue": {"id": "f6572f66-2623-4a5e-b0d9-4a5028dea98f",
        "name": "Computer", "type": "journal", "alternate_names": ["IEEE Computer",
        "IEEE Comput"], "issn": "0018-9162", "url": "http://www.computer.org/computer",
        "alternate_urls": ["https://ieeexplore.ieee.org/servlet/opac?punumber=2",
        "http://www.computer.org/portal/site/ieeecs/index.jsp", "https://ieeexplore.ieee.org/xpl/RecentIssue.jsp?punumber=2"]},
        "url": "https://www.semanticscholar.org/paper/eb24f14677fab1ae65c3f558c899c2c256c147ae",
        "title": "Software Development for Infrastructure", "abstract": "Infrastructure
        software needs more stringent correctness, reliability, efficiency, and maintainability
        requirements than non- essential applications. This implies greater emphasis
        on up-front design, static structure enforced by a type system, compact data
        structures, simplified code structure, and improved tool support. Education
        for infrastructure and application developers should differ to reflect that
        emphasis. This Web extra video features Bjarne Stroustrup of Texas A&M University
        discussing how C++ can help improve the reliability, maintainability, and
        performance of infrastructure software. He also describes features that are
        part of the latest versions of the C++ language.", "venue": "Computer", "year":
        2012, "referenceCount": 23, "citationCount": 29, "influentialCitationCount":
        1, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle"], "publicationDate": null, "journal":
        {"volume": "45", "pages": "47-58", "name": "Computer"}, "authors": [{"authorId":
        "1706320", "name": "B. Stroustrup"}]}, {"paperId": "ff0992f71886ff3483e7f7a32b4013121938c838",
        "externalIds": {"MAG": "2186865202", "CorpusId": 62119282}, "corpusId": 62119282,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/ff0992f71886ff3483e7f7a32b4013121938c838",
        "title": "Syllabus Types and Declarations, Pointers, Arrays, and Structures,
        Expressions and Statements, Functions, Namespaces and Exceptions, Source Files
        and Programs. Classes, Operator Overloading, Derived Classes, Templates, Exception
        Handling, Class Hierarchies. Library Organization and Container, Standa",
        "abstract": null, "venue": "", "year": 2012, "referenceCount": 0, "citationCount":
        0, "influentialCitationCount": 0, "isOpenAccess": false, "openAccessPdf":
        null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category":
        "Computer Science", "source": "external"}], "publicationTypes": null, "publicationDate":
        null, "journal": {"volume": "", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}, {"authorId": "152592838", "name": "B. Eckel"}]},
        {"paperId": "47206984317a3b7e7359de0ce0c744dd2009f5e2", "externalIds": {"MAG":
        "2189614104", "DOI": "10.1001/jama.1963.03710130113136", "CorpusId": 210821286},
        "corpusId": 210821286, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/47206984317a3b7e7359de0ce0c744dd2009f5e2",
        "title": "Exclusive Interview with", "abstract": null, "venue": "", "year":
        2011, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Psychology"],
        "s2FieldsOfStudy": [{"category": "Psychology", "source": "external"}], "publicationTypes":
        null, "publicationDate": null, "journal": {"volume": "", "name": ""}, "authors":
        [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId": "5b4802e07945dd6b370a8408f4f607b8168038f5",
        "externalIds": {"DBLP": "journals/mics/ReisS11", "MAG": "2006327947", "DOI":
        "10.1007/s11786-011-0094-1", "CorpusId": 13443410}, "corpusId": 13443410,
        "publicationVenue": {"id": "b258e2ff-b59e-470e-a7d1-8eae8478c529", "name":
        "Mathematics and Computer Science", "type": "journal", "alternate_names":
        ["Mathematics in Computer Science", "Math Comput Sci"], "issn": "2575-6028",
        "alternate_issns": ["1661-8270"], "url": "http://www.sciencepublishinggroup.com/journal/archive?issueid=-1&journalid=247",
        "alternate_urls": ["https://www.springer.com/birkhauser/mathematics/journal/11786",
        "https://link.springer.com/journal/11786"]}, "url": "https://www.semanticscholar.org/paper/5b4802e07945dd6b370a8408f4f607b8168038f5",
        "title": "A Principled, Complete, and Efficient Representation of C++", "abstract":
        null, "venue": "Mathematics and Computer Science", "year": 2011, "referenceCount":
        35, "citationCount": 18, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"],
        "publicationDate": "2011-12-07", "journal": {"volume": "5", "pages": "335-356",
        "name": "Mathematics in Computer Science"}, "authors": [{"authorId": "145668248",
        "name": "G. D. Reis"}, {"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "650f103dc99e3907028af458051a5dd241b58aab", "externalIds": {"DBLP":
        "conf/sle/SuttonS11", "MAG": "1578333818", "DOI": "10.1007/978-3-642-28830-2_6",
        "CorpusId": 12755579}, "corpusId": 12755579, "publicationVenue": {"id": "b147e0ad-dec8-401c-87b9-3ff4c341adf3",
        "name": "Software Language Engineering", "type": "conference", "alternate_names":
        ["SLE", "Softw Lang Eng"]}, "url": "https://www.semanticscholar.org/paper/650f103dc99e3907028af458051a5dd241b58aab",
        "title": "Design of Concept Libraries for C++", "abstract": null, "venue":
        "Software Language Engineering", "year": 2011, "referenceCount": 49, "citationCount":
        27, "influentialCitationCount": 1, "isOpenAccess": false, "openAccessPdf":
        null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category":
        "Computer Science", "source": "external"}, {"category": "Computer Science",
        "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"], "publicationDate":
        "2011-07-03", "journal": {"pages": "97-118"}, "authors": [{"authorId": "144144728",
        "name": "A. Sutton"}, {"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "048aa35d1ca049b612c71aa6a702b4e954b1077c", "externalIds": {"DBLP":
        "conf/sac/ReisS10", "MAG": "2114272403", "DOI": "10.1145/1774088.1774537",
        "CorpusId": 2639112}, "corpusId": 2639112, "publicationVenue": {"id": "d80d58be-58fc-4181-a397-5ac6fd976a47",
        "name": "ACM Symposium on Applied Computing", "type": "conference", "alternate_names":
        ["Sel Area Cryptogr", "Int Conf Sel area Cryptogr", "International Conference
        on Selected areas in Cryptography", "ACM Symp Appl Comput", "Selected Areas
        in Cryptography", "Symposium on Applied Computing", "SAC", "Symp Appl Comput"],
        "url": "https://www.acm.org/publications", "alternate_urls": ["http://sacworkshop.org/"]},
        "url": "https://www.semanticscholar.org/paper/048aa35d1ca049b612c71aa6a702b4e954b1077c",
        "title": "General constant expressions for system programming languages",
        "abstract": "Most mainstream system programming languages provide support
        for builtin types, and extension mechanisms through userdefined types. They
        also come with a notion of constant expressions whereby some expressions (such
        as array bounds) can be evaluated at compile time. However, they require constant
        expressions to be written in an impoverished language with minimal support
        from the type system; this is tedious and error-prone. This paper presents
        a framework for generalizing the notion of constant expressions in modern
        system programming languages. It extends compile time evaluation to functions
        and variables of user-defined types, thereby including formerly ad hoc notions
        of Read Only Memory (ROM) objects into a general and type safe framework.
        It allows a programmer to specify that an operation must be evaluated at compile
        time. Furthermore, it provides more direct support for key meta programming
        and generative programming techniques. The framework is formalized as an extension
        of underlying type system with a binding time analysis. It was designed to
        meet real-world requirements. In particular, key design decisions relate to
        balancing expressive power to implementability in industrial compilers and
        teachability. It has been implemented for C++ in the GNU Compiler Collection,
        and is part of the next ISO C++ standard.", "venue": "ACM Symposium on Applied
        Computing", "year": 2010, "referenceCount": 16, "citationCount": 14, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle"], "publicationDate": "2010-03-22", "journal":
        {"pages": "2131-2136"}, "authors": [{"authorId": "145668248", "name": "G.
        D. Reis"}, {"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId":
        "2fe159422eab95c284b6a9b3e9fef52a310c4527", "externalIds": {"MAG": "2125614039",
        "DBLP": "conf/isorc/DechevPS10", "DOI": "10.1109/ISORC.2010.10", "CorpusId":
        14853108}, "corpusId": 14853108, "publicationVenue": {"id": "01e34297-29a0-4163-9100-f359c6f468e7",
        "name": "IEEE International Symposium on Object/Component/Service-Oriented
        Real-Time Distributed Computing", "alternate_names": ["IEEE Int Symp Object/component/service-oriented
        Real-time Distrib Comput"], "issn": "1555-0885", "url": "http://ieeexplore.ieee.org/xpl/conhome.jsp?punumber=1000514"},
        "url": "https://www.semanticscholar.org/paper/2fe159422eab95c284b6a9b3e9fef52a310c4527",
        "title": "Understanding and Effectively Preventing the ABA Problem in Descriptor-Based
        Lock-Free Designs", "abstract": "An increasing number of modern real-time
        systems and the nowadays ubiquitous multicore architectures demand the application
        of programming techniques for reliable and efficient concurrent synchronization.
        Some recently developed Compare-And-Swap (CAS) based nonblocking techniques
        hold the promise of delivering practical and safer concurrency. The ABA problem
        is a fundamental problem to many CAS-based designs. Its significance has increased
        with the suggested use of CAS as a core atomic primitive for the implementation
        of portable lock-free algorithms. The ABA problem''s occurrence is due to
        the intricate and complex interactions of the application''s concurrent operations
        and, if not remedied, ABA can significantly corrupt the semantics of a nonblocking
        algorithm. The current state of the art leaves the elimination of the ABA
        hazards to the ingenuity of the software designer. In this work we provide
        the first systematic and detailed analysis of the ABA problem in lock-free
        Descriptor-based designs. We study the semantics of Descriptor-based lock-free
        data structures and propose a classification of their operations that helps
        us better understand the ABA problem and subsequently derive an effective
        ABA prevention scheme. Our ABA prevention approach outperforms by a large
        factor the use of the alternative CAS-based ABA prevention schemes. It offers
        speeds comparable to the use of the architecture-specific CAS2 instruction
        used for version counting. We demonstrate our ABA prevention scheme by integrating
        it into an advanced nonblocking data structure, a lock-free dynamically resizable
        array.", "venue": "IEEE International Symposium on Object/Component/Service-Oriented
        Real-Time Distributed Computing", "year": 2010, "referenceCount": 17, "citationCount":
        61, "influentialCitationCount": 0, "isOpenAccess": false, "openAccessPdf":
        null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category":
        "Computer Science", "source": "external"}, {"category": "Computer Science",
        "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"], "publicationDate":
        "2010-05-05", "journal": {"pages": "185-192", "name": "2010 13th IEEE International
        Symposium on Object/Component/Service-Oriented Real-Time Distributed Computing"},
        "authors": [{"authorId": "1778664", "name": "D. Dechev"}, {"authorId": "1707965",
        "name": "P. Pirkelbauer"}, {"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "3fba9cbfd08e6cdeb0882be29a77bfc806aaaad1", "externalIds": {"MAG":
        "2054846797", "DBLP": "journals/scp/PirkelbauerPMS10", "DOI": "10.1016/j.scico.2009.04.002",
        "CorpusId": 34268370}, "corpusId": 34268370, "publicationVenue": {"id": "08d68650-8568-4b4f-8c14-1b61ccf55b17",
        "name": "Science of Computer Programming", "type": "journal", "alternate_names":
        ["Sci Comput Program"], "issn": "0167-6423", "url": "https://www.journals.elsevier.com/science-of-computer-programming",
        "alternate_urls": ["http://www.sciencedirect.com/science/journal/01676423"]},
        "url": "https://www.semanticscholar.org/paper/3fba9cbfd08e6cdeb0882be29a77bfc806aaaad1",
        "title": "Dynamic algorithm selection for runtime concepts", "abstract": null,
        "venue": "Science of Computer Programming", "year": 2010, "referenceCount":
        32, "citationCount": 3, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"],
        "publicationDate": "2010-09-01", "journal": {"volume": "75", "pages": "773-786",
        "name": "Sci. Comput. Program."}, "authors": [{"authorId": "1707965", "name":
        "P. Pirkelbauer"}, {"authorId": "2577312", "name": "Sean Parent"}, {"authorId":
        "34619639", "name": "Mat Marcus"}, {"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "50a1234bd6992539e231a7809bb802ff6424b20d", "externalIds": {"MAG":
        "2052790390", "DBLP": "journals/scp/PirkelbauerSS10", "DOI": "10.1016/j.scico.2009.06.002",
        "CorpusId": 18003126}, "corpusId": 18003126, "publicationVenue": {"id": "08d68650-8568-4b4f-8c14-1b61ccf55b17",
        "name": "Science of Computer Programming", "type": "journal", "alternate_names":
        ["Sci Comput Program"], "issn": "0167-6423", "url": "https://www.journals.elsevier.com/science-of-computer-programming",
        "alternate_urls": ["http://www.sciencedirect.com/science/journal/01676423"]},
        "url": "https://www.semanticscholar.org/paper/50a1234bd6992539e231a7809bb802ff6424b20d",
        "title": "Design and evaluation of C++ open multi-methods", "abstract": null,
        "venue": "Science of Computer Programming", "year": 2010, "referenceCount":
        61, "citationCount": 8, "influentialCitationCount": 1, "isOpenAccess": true,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"],
        "publicationDate": "2010-07-01", "journal": {"volume": "75", "pages": "638-667",
        "name": "Sci. Comput. Program."}, "authors": [{"authorId": "1707965", "name":
        "P. Pirkelbauer"}, {"authorId": "2307401", "name": "Yuriy Solodkyy"}, {"authorId":
        "1706320", "name": "B. Stroustrup"}]}, {"paperId": "5da1e30fffeb6d271424704d27900d88df8c30f7",
        "externalIds": {"MAG": "2265428978", "CorpusId": 62318876}, "corpusId": 62318876,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/5da1e30fffeb6d271424704d27900d88df8c30f7",
        "title": "Introducing C++0x", "abstract": "We have a draft for a revised ISO
        C++ standard, C++0x. I present the background for C++, its aims, a bit about
        the standards process (with opinions), some of the guiding principles (with
        tiny code examples), and a case study. This case study is concurrency support
        facilities (memory model, threads, locks and futures).", "venue": "", "year":
        2010, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": "2010-11-10", "journal": {"volume":
        "", "name": ""}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "a005b52922ebb34ed6edf7f44a6305cddf50ddc6", "externalIds": {"DBLP":
        "conf/sle/PirkelbauerDS10", "MAG": "1782148749", "DOI": "10.1007/978-3-642-19440-5_8",
        "CorpusId": 15704767}, "corpusId": 15704767, "publicationVenue": {"id": "b147e0ad-dec8-401c-87b9-3ff4c341adf3",
        "name": "Software Language Engineering", "type": "conference", "alternate_names":
        ["SLE", "Softw Lang Eng"]}, "url": "https://www.semanticscholar.org/paper/a005b52922ebb34ed6edf7f44a6305cddf50ddc6",
        "title": "Support for the Evolution of C++ Generic Functions", "abstract":
        null, "venue": "Software Language Engineering", "year": 2010, "referenceCount":
        35, "citationCount": 4, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"],
        "publicationDate": "2010-10-12", "journal": {"pages": "123-142"}, "authors":
        [{"authorId": "1707965", "name": "P. Pirkelbauer"}, {"authorId": "1778664",
        "name": "D. Dechev"}, {"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "b629f7dbe4cb3fae101fb4a878177f23479bb7e3", "externalIds": {"MAG":
        "2522278925", "CorpusId": 57823818}, "corpusId": 57823818, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/b629f7dbe4cb3fae101fb4a878177f23479bb7e3",
        "title": "Programming language evolution and source code rejuvenation", "abstract":
        "Programmers rely on programming idioms, design patterns, and workaround techniques
        to express fundamental design not directly supported by the language. Evolving
        languages often address frequently encountered problems by adding language
        and library support to subsequent releases. By using new features, programmers
        can express their intent more directly. As new concerns, such as parallelism
        or security, arise, early idioms and language facilities can become serious
        liabilities. Modern code sometimes benefits from optimization techniques not
        feasible for code that uses less expressive constructs. Manual source code
        migration is expensive, time-consuming, and prone to errors. \nThis dissertation
        discusses the introduction of new language features and libraries, exemplified
        by open-methods and a non-blocking growable array library. We describe the
        relationship of open-methods to various alternative implementation techniques.
        The benefits of open-methods materialize in simpler code, better performance,
        and similar memory footprint when compared to using alternative implementation
        techniques. \nBased on these findings, we develop the notion of source code
        rejuvenation, the automated migration of legacy code. Source code rejuvenation
        leverages enhanced program language and library facilities by finding and
        replacing coding patterns that can be expressed through higher-level software
        abstractions. Raising the level of abstraction improves code quality by lowering
        software entropy. In conjunction with extensions to programming languages,
        source code rejuvenation offers an evolutionary trajectory towards more reliable,
        more secure, and better performing code. \nWe describe the tools that allow
        us efficient implementations of code rejuvenations. The Pivot source-to-source
        translation infrastructure and its traversal mechanism forms the core of our
        machinery. In order to free programmers from representation details, we use
        a light-weight pattern matching generator that turns a C++ like input language
        into pattern matching code. The generated code integrates seamlessly with
        the rest of the analysis framework. \nWe utilize the framework to build analysis
        systems that find common workaround techniques for designated language extensions
        of C++0x (e.g., initializer lists). Moreover, we describe a novel system (TACE
        \u2014 template analysis and concept extraction) for the analysis of uninstantiated
        template code. Our tool automatically extracts requirements from the body
        of template functions. TACE helps programmers understand the requirements
        that their code de facto imposes on arguments and compare those de facto requirements
        to formal and informal specifications.", "venue": "", "year": 2010, "referenceCount":
        127, "citationCount": 5, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate":
        null, "journal": {"volume": "", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}, {"authorId": "1707965", "name": "P. Pirkelbauer"}]},
        {"paperId": "c21a4e332b7db0494d70810744da97fff4c7bb94", "externalIds": {"DBLP":
        "books/daglib/p/DechevRPS10", "MAG": "1652959898", "DOI": "10.1007/978-0-387-09753-4_9",
        "CorpusId": 14977501}, "corpusId": 14977501, "publicationVenue": null, "url":
        "https://www.semanticscholar.org/paper/c21a4e332b7db0494d70810744da97fff4c7bb94",
        "title": "Programming and Validation Techniques for Reliable Goal-driven Autonomic
        Software", "abstract": null, "venue": "Autonomic Communication", "year": 2010,
        "referenceCount": 28, "citationCount": 3, "influentialCitationCount": 0, "isOpenAccess":
        false, "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate":
        null, "journal": {"pages": "231-247"}, "authors": [{"authorId": "1778664",
        "name": "D. Dechev"}, {"authorId": "2158900", "name": "N. Rouquette"}, {"authorId":
        "1707965", "name": "P. Pirkelbauer"}, {"authorId": "1706320", "name": "B.
        Stroustrup"}]}, {"paperId": "eda811221528156924ab2eb95b578c92fab609e0", "externalIds":
        {"MAG": "155906615", "DBLP": "journals/cacm/Stroustrup10", "DOI": "10.1145/1629175.1629192",
        "CorpusId": 14533772}, "corpusId": 14533772, "publicationVenue": null, "url":
        "https://www.semanticscholar.org/paper/eda811221528156924ab2eb95b578c92fab609e0",
        "title": "ViewpointWhat should we teach new software developers? Why?", "abstract":
        "Fundamental changes to computer science education are required to better
        address the needs of industry.", "venue": "CACM", "year": 2010, "referenceCount":
        0, "citationCount": 20, "influentialCitationCount": 0, "isOpenAccess": true,
        "openAccessPdf": {"url": "http://dl.acm.org/ft_gateway.cfm?id=1629192&type=pdf",
        "status": null}, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Education",
        "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"], "publicationDate":
        null, "journal": {"volume": "53", "pages": "40-42", "name": "Commun. ACM"},
        "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId":
        "0b553242f822c4a7443bc3fd0d6b378276465f7c", "externalIds": {"MAG": "2117647020",
        "DOI": "10.1109/SMC-IT.2009.45", "CorpusId": 1420210}, "corpusId": 1420210,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/0b553242f822c4a7443bc3fd0d6b378276465f7c",
        "title": "Reliable and Efficient Concurrent Synchronization for Embedded Real-Time
        Software", "abstract": "The high degree of autonomy and increased complexity
        of future robotic spacecraft pose significant challenges in assuring their
        reliability and efficiency. To achieve fast and safe concurrent interactions
        in mission critical code, we survey the practical state-of-the-art nonblocking
        programming techniques. We study in detail two nonblocking approaches: (1)
        CAS-based algorithms and (2) Software Transactional Memory. We evaluate the
        strengths and weaknesses of each approach by applying each methodology for
        engineering the design and implementation of a nonblocking shared vector.
        Our study investigates how the application of nonblocking synchronization
        can help eliminate the problems of deadlock, livelock, and priority inversion
        and at the same time deliver a performance improvement in embedded real-time
        software.", "venue": "2009 Third IEEE International Conference on Space Mission
        Challenges for Information Technology", "year": 2009, "referenceCount": 26,
        "citationCount": 7, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["Conference", "Review"],
        "publicationDate": "2009-07-19", "journal": {"pages": "323-330", "name": "2009
        Third IEEE International Conference on Space Mission Challenges for Information
        Technology"}, "authors": [{"authorId": "1778664", "name": "D. Dechev"}, {"authorId":
        "1706320", "name": "B. Stroustrup"}]}, {"paperId": "18968c4b1879ff1a84fcb64b0619264c00fb2f75",
        "externalIds": {"MAG": "1498335309", "DBLP": "conf/sofsem/PirkelbauerDS10",
        "DOI": "10.1007/978-3-642-11266-9_53", "CorpusId": 1974617}, "corpusId": 1974617,
        "publicationVenue": {"id": "74136324-6e61-46d3-912f-8be85580ef40", "name":
        "Conference on Current Trends in Theory and Practice of Informatics", "type":
        "conference", "alternate_names": ["SOFSEM", "Conf Curr Trends Theory Pract
        Informatics"]}, "url": "https://www.semanticscholar.org/paper/18968c4b1879ff1a84fcb64b0619264c00fb2f75",
        "title": "Source Code Rejuvenation Is Not Refactoring", "abstract": null,
        "venue": "Conference on Current Trends in Theory and Practice of Informatics",
        "year": 2009, "referenceCount": 41, "citationCount": 22, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle"], "publicationDate": "2009-12-08", "journal":
        {"pages": "639-650"}, "authors": [{"authorId": "1707965", "name": "P. Pirkelbauer"},
        {"authorId": "1778664", "name": "D. Dechev"}, {"authorId": "1706320", "name":
        "B. Stroustrup"}]}, {"paperId": "1ae79c162636fb99316896916af62954df761ae8",
        "externalIds": {"MAG": "2114428527", "DBLP": "conf/oopsla/TsafrirWBS09", "DOI":
        "10.1145/1640089.1640121", "CorpusId": 545946}, "corpusId": 545946, "publicationVenue":
        {"id": "de124794-a8b5-43ce-b740-7643c17bb1ea", "name": "Conference on Object-Oriented
        Programming Systems, Languages, and Applications", "type": "conference", "alternate_names":
        ["OOPSLA", "Conf Object-oriented Program Syst Lang Appl"]}, "url": "https://www.semanticscholar.org/paper/1ae79c162636fb99316896916af62954df761ae8",
        "title": "Minimizing dependencies within generic classes for faster and smaller
        programs", "abstract": "Generic classes can be used to improve performance
        by allowing compile-time polymorphism. But the applicability of compile-time
        polymorphism is narrower than that of runtime polymorphism, and it might bloat
        the object code. We advocate a programming principle whereby a generic class
        should be implemented in a way that minimizes the dependencies between its
        members (nested types, methods) and its generic type parameters. Conforming
        to this principle (1) reduces the bloat and (2) gives rise to a previously
        unconceived manner of using the language that expands the applicability of
        compile-time polymorphism to a wider range of problems. Our contribution is
        thus a programming technique that generates faster and smaller programs. We
        apply our ideas to GCC''s STL containers and iterators, and we demonstrate
        notable speedups and reduction in object code size (real application runs
        1.2x to 2.1x faster and STL code is 1x to 25x smaller). We conclude that standard
        generic APIs (like STL) should be amended to reflect the proposed principle
        in the interest of efficiency and compactness. Such modifications will not
        break old code, simply increase flexibility. Our findings apply to languages
        like C++, C#, and D, which realize generic programming through multiple instantiations.",
        "venue": "Conference on Object-Oriented Programming Systems, Languages, and
        Applications", "year": 2009, "referenceCount": 58, "citationCount": 4, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle"], "publicationDate": "2009-10-25", "journal":
        {"pages": "425-444"}, "authors": [{"authorId": "3188958", "name": "Dan Tsafrir"},
        {"authorId": "2209160", "name": "R. Wisniewski"}, {"authorId": "1678228",
        "name": "D. F. Bacon"}, {"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "4cd6b68ec9a2ffd18834b1750e64c670bc7b01da", "externalIds": {"DBLP":
        "conf/ecbs/DechevPRS09", "MAG": "2102513374", "DOI": "10.1109/ECBS.2009.12",
        "CorpusId": 14983110}, "corpusId": 14983110, "publicationVenue": {"id": "4ed0b4df-7d5f-488e-a8ea-deb3c61e51a7",
        "name": "European Conference on the Engineering of Computer-Based Systems",
        "type": "conference", "alternate_names": ["Eur Conf Eng Comput Syst", "Engineering
        of Computer-Based Systems", "Annu IEEE Int Conf Workshop Eng Comput Syst",
        "Eng Comput Syst", "Annual IEEE International Conference and Workshop on the
        Engineering of Computer-Based Systems", "ECBS"], "url": "http://www.wikicfp.com/cfp/program?id=795"},
        "url": "https://www.semanticscholar.org/paper/4cd6b68ec9a2ffd18834b1750e64c670bc7b01da",
        "title": "Semantically Enhanced Containers for Concurrent Real-Time Systems",
        "abstract": "Future space missions, such as Mars Science Laboratory, are built
        upon computing platforms providing a high degree of autonomy and diverse functionality.
        The increased sophistication of robotic spacecraft has skyrocketed the complexity
        and cost of its software development and validation. The engineering of autonomous
        spacecraft software relies on the availability and application of advanced
        methods and tools that deliver safe concurrent synchronization as well as
        enable the validation of domain-specific semantic invariants. The software
        design and certification methodologies applied at NASA do not reach the level
        of detail of providing guidelines for the development of reliable concurrent
        software. To achieve effective and safe concurrent interactions as well as
        guarantee critical domain-specific properties in code, we introduce the notion
        of a Semantically Enhanced Container (SEC). A SEC is a data structure engineered
        to deliver the flexibility and usability of the popular ISO C++ Standard Template
        Library containers, while at the same time it is hand-crafted to guarantee
        domain-specific policies. We demonstrate the SEC proof-of-concept by presenting
        a shared nonblocking SEC vector. To eliminate the hazards of the ABA problem
        (a fundamental problem in lock-free programming), we introduce an innovative
        library for querying C++ semantic information. Our SEC design aims at providing
        an effective model for shared data access within the JPL''s Mission Data System.
        Our test results show that the SEC vector delivers significant performance
        gains (a factor of 3 or more) in contrast to the application of nonblocking
        synchronization amended with the traditional ABA avoidance scheme.", "venue":
        "European Conference on the Engineering of Computer-Based Systems", "year":
        2009, "referenceCount": 33, "citationCount": 8, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": "2009-04-14",
        "journal": {"pages": "48-57", "name": "2009 16th Annual IEEE International
        Conference and Workshop on the Engineering of Computer Based Systems"}, "authors":
        [{"authorId": "1778664", "name": "D. Dechev"}, {"authorId": "1707965", "name":
        "P. Pirkelbauer"}, {"authorId": "2158900", "name": "N. Rouquette"}, {"authorId":
        "1706320", "name": "B. Stroustrup"}]}, {"paperId": "51f9449505dfcd8525e026d5aa345754ff05c526",
        "externalIds": {"MAG": "2105421658", "DBLP": "conf/oopsla/DechevS09", "DOI":
        "10.1145/1639950.1639954", "CorpusId": 11689187}, "corpusId": 11689187, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/51f9449505dfcd8525e026d5aa345754ff05c526",
        "title": "Scalable nonblocking concurrent objects for mission critical code",
        "abstract": "The high degree of complexity and autonomy of future robotic
        space missions, such as Mars Science Laboratory (MSL), poses serious challenges
        in assuring their reliability and efficiency. Providing fast and safe concurrent
        synchronization is of critical importance to such autonomous embedded software
        systems. The application of nonblocking synchronization is known to help eliminate
        the hazards of deadlock, livelock, and priority inversion. The nonblocking
        programming techniques are notoriously difficult to implement and offer a
        variety of semantic guarantees and usability and performance trade-offs. The
        present software development and certification methodologies applied at NASA
        do not reach the level of detail of providing guidelines for the design of
        concurrent software. The complex task of engineering reliable and efficient
        concurrent synchronization is left to the programmer''s ingenuity. A number
        of Software Transactional Memory (STM) approaches gained wide popularity because
        of their easy to apply interfaces, but currently fail to offer scalable nonblocking
        transactions. In this work we provide an in-depth analysis of the nonblocking
        synchronization semantics and their applicability in mission critical code.
        We describe a generic implementation of a methodology for scalable implementation
        of concurrent objects. Our performance evaluation demonstrates that our approach
        is practical and outperforms the application of nonblocking transactions by
        a large factor. In addition, we apply our Descriptor-based approach to provide
        a solution to the fundamental ABA problem. Our ABA prevention scheme, called
        the lambda-delta approach, outperforms by a large factor the use of garbage
        collection for the safe management of each shared location. It offers speeds
        comparable to the application of the architecture-specific CAS2 instruction
        used for version counting. The lambda-delta approach is an ABA prevention
        technique based on classification of concurrent operations and 3-step execution
        of a Descriptor object. A practical alternative to the application of CAS2
        is particularly important for the engineering of embedded systems.", "venue":
        "OOPSLA Companion", "year": 2009, "referenceCount": 36, "citationCount": 16,
        "influentialCitationCount": 1, "isOpenAccess": false, "openAccessPdf": null,
        "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category": "Computer
        Science", "source": "external"}, {"category": "Computer Science", "source":
        "s2-fos-model"}], "publicationTypes": ["JournalArticle"], "publicationDate":
        "2009-10-25", "journal": {"pages": "597-610"}, "authors": [{"authorId": "1778664",
        "name": "D. Dechev"}, {"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "672ff6a0fb966c477cab7125f313471e17d5cda0", "externalIds": {"MAG":
        "2102804346", "DOI": "10.1145/1536274.1536301", "CorpusId": 5812760}, "corpusId":
        5812760, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/672ff6a0fb966c477cab7125f313471e17d5cda0",
        "title": "Programming in an undergraduate CS curriculum", "abstract": "This
        note argues for a fairly classical undergraduate computer science (CS) curriculum
        where \"software\" (programming and related topics) takes a bigger role than
        is often the case. The discussion is based partly on experience with an undergraduate
        curriculum change at Texas A&M University and with developing a new freshman
        programming course. That freshman course is the central topic of this note.
        Based on industrial experience, it is argued that the primary aim of a university
        education in the area of \"software\" is to be a foundation for professional
        work. The primary design criterion for the freshman (first year) programming
        course is to make it a good start at that. Caveat: the opinions expressed
        about the needed improvements of and directions for software education is
        based on personal experience rather than hard data.", "venue": "", "year":
        2009, "referenceCount": 4, "citationCount": 18, "influentialCitationCount":
        1, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Education", "source": "s2-fos-model"}], "publicationTypes":
        null, "publicationDate": "2009-05-01", "journal": {"volume": "", "pages":
        "82-89", "name": ""}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "6a48bee8b7d43c240626b332371d8021bd451448", "externalIds": {"CorpusId":
        102342339}, "corpusId": 102342339, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/6a48bee8b7d43c240626b332371d8021bd451448",
        "title": "Final Report for DE-FG 02-04 ER 25623 Operating / Runtime Systems
        for Extreme Scale Scientific Computation Program Notice 04-13 August 2009
        SmartApps : Middleware for Adaptive Applications on Reconfigurable Platforms",
        "abstract": null, "venue": "", "year": 2009, "referenceCount": 73, "citationCount":
        0, "influentialCitationCount": 0, "isOpenAccess": false, "openAccessPdf":
        null, "fieldsOfStudy": null, "s2FieldsOfStudy": [{"category": "Computer Science",
        "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate": null,
        "journal": null, "authors": [{"authorId": "1689939", "name": "Lawrence Rauchwerger"},
        {"authorId": "35162077", "name": "M. Adams"}, {"authorId": "1678972", "name":
        "N. Amato"}, {"authorId": "1706320", "name": "B. Stroustrup"}, {"authorId":
        "48664379", "name": "O. Krieger"}, {"authorId": "2061093767", "name": "Jos\u00e9
        M. Moreira"}, {"authorId": "1728219", "name": "Vivek Sarkar"}]}, {"paperId":
        "92b1b92973fabc863f14a51e0c6e36c150173c2e", "externalIds": {"CorpusId": 17109509},
        "corpusId": 17109509, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/92b1b92973fabc863f14a51e0c6e36c150173c2e",
        "title": "Axioms : Semantics Aspects of C + + Concepts", "abstract": "This
        paper clarifies the semantics of \u201caxioms\u201d in the C++ concept proposal
        and provides standard wording, following the C++ committee vote and resolution
        at the Spring 2009 meeting at Summit, NJ.", "venue": "", "year": 2009, "referenceCount":
        0, "citationCount": 9, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy": [{"category":
        "Economics", "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate":
        null, "journal": null, "authors": [{"authorId": "145668248", "name": "G. D.
        Reis"}, {"authorId": "1706320", "name": "B. Stroustrup"}, {"authorId": "153851143",
        "name": "Alisdair Meredith"}]}, {"paperId": "c5919ead7fe787bceaad4414567fbaf9b542ead8",
        "externalIds": {"MAG": "2130207950", "CorpusId": 62040091}, "corpusId": 62040091,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/c5919ead7fe787bceaad4414567fbaf9b542ead8",
        "title": "What is C++0x?", "abstract": "This paper illustrates the power of
        C++ through some simple examples of C++0x code presented in the context of
        their role in C++. My aim is to give an idea of the breath of the facilities
        and an understanding of the aims of C++, rather than offering an in-depth
        understanding of any individual feature. The list of language features and
        standard library facilities described is too long mention here, but a major
        theme is the role of features as building blocks for elegant and efficient
        software, especially software infrastructure components. The emphasis is on
        C++\u2019s facilities for building lightweight abstractions.", "venue": "",
        "year": 2009, "referenceCount": 14, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": null, "journal": {"volume": "",
        "name": ""}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "d0dc7cc39d0f8f2b8bf3e4eca2e457d96ae8e702", "externalIds": {"MAG":
        "104087424", "CorpusId": 57796867}, "corpusId": 57796867, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/d0dc7cc39d0f8f2b8bf3e4eca2e457d96ae8e702",
        "title": "The Design of C++0x", "abstract": "Mixtures of particulate glass
        are separated into their species by magnetic forces or a combination of magnetic
        and acceleration forces such as gravity or centripetal acceleration.", "venue":
        "", "year": 2009, "referenceCount": 0, "citationCount": 11, "influentialCitationCount":
        2, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Physics", "source": "s2-fos-model"}, {"category":
        "Education", "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate":
        null, "journal": {"volume": "", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "e2e096fad3938c426a886c32853e04f24fbcdf55",
        "externalIds": {"DBLP": "conf/ecbs/DechevS09", "MAG": "2139578808", "DOI":
        "10.1109/ECBS.2009.15", "CorpusId": 10801423}, "corpusId": 10801423, "publicationVenue":
        {"id": "4ed0b4df-7d5f-488e-a8ea-deb3c61e51a7", "name": "European Conference
        on the Engineering of Computer-Based Systems", "type": "conference", "alternate_names":
        ["Eur Conf Eng Comput Syst", "Engineering of Computer-Based Systems", "Annu
        IEEE Int Conf Workshop Eng Comput Syst", "Eng Comput Syst", "Annual IEEE International
        Conference and Workshop on the Engineering of Computer-Based Systems", "ECBS"],
        "url": "http://www.wikicfp.com/cfp/program?id=795"}, "url": "https://www.semanticscholar.org/paper/e2e096fad3938c426a886c32853e04f24fbcdf55",
        "title": "Model-Based Product-Oriented Certification", "abstract": "Future
        space missions such as the Mars Science Laboratory and Project Constellation
        suggest the engineering of some of the most complex man-rated software systems.
        The present process-oriented certification methodologies employed by NASA
        are becoming prohibitively expensive when applied to systems of such complexity.
        The process of software certification establishes the level of confidence
        in a software system in the context of its functional and safety requirements.
        Providing such certification evidence may require the application of a number
        of software development, analysis, and validation techniques. We define product-oriented
        certification as the process of measuring the system''s reliability and efficiency
        based on the analysis of its design (expressed in models) and implementation
        (expressed in source code). In this work we introduce a framework for model-based
        product-oriented certification founded on the concept of source code enhancement
        and analysis. We describe a classification of the certification artifact types,
        the development and validation tools and techniques, the application domain-specific
        factors, and the levels of abstraction. We demonstrate the application of
        our certification platform by analyzing the process of model-based development
        of the parallel autonomic goals network, a critical component of the Jet Propulsion
        Laboratory''s Mission Data System (MDS). We describe how we identify and satisfy
        seven critical certification artifacts in the process of model-driven development
        and validation of the MDS goal network. In the analysis of this process, we
        establish the relationship among the seven certification artifacts, the applied
        development and validation techniques and tools, and the level of abstraction
        of system design and development.", "venue": "European Conference on the Engineering
        of Computer-Based Systems", "year": 2009, "referenceCount": 31, "citationCount":
        4, "influentialCitationCount": 0, "isOpenAccess": true, "openAccessPdf": {"url":
        "http://www.stroustrup.com/mbd09.pdf", "status": null}, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": "2009-04-14",
        "journal": {"pages": "295-304", "name": "2009 16th Annual IEEE International
        Conference and Workshop on the Engineering of Computer Based Systems"}, "authors":
        [{"authorId": "1778664", "name": "D. Dechev"}, {"authorId": "1706320", "name":
        "B. Stroustrup"}]}, {"paperId": "2184f48ae1ae03292aab3ad069fdf5af266ec5e5",
        "externalIds": {"DBLP": "conf/sac/PirkelbauerPMS08", "MAG": "2146942245",
        "DOI": "10.1145/1363686.1363734", "CorpusId": 14508743}, "corpusId": 14508743,
        "publicationVenue": {"id": "d80d58be-58fc-4181-a397-5ac6fd976a47", "name":
        "ACM Symposium on Applied Computing", "type": "conference", "alternate_names":
        ["Sel Area Cryptogr", "Int Conf Sel area Cryptogr", "International Conference
        on Selected areas in Cryptography", "ACM Symp Appl Comput", "Selected Areas
        in Cryptography", "Symposium on Applied Computing", "SAC", "Symp Appl Comput"],
        "url": "https://www.acm.org/publications", "alternate_urls": ["http://sacworkshop.org/"]},
        "url": "https://www.semanticscholar.org/paper/2184f48ae1ae03292aab3ad069fdf5af266ec5e5",
        "title": "Runtime concepts for the C++ standard template library", "abstract":
        "A key benefit of generic programming is its support for producing modules
        with clean separation. In particular, generic algorithms are written to work
        with a wide variety of unmodified types. The Runtime concept idiom extends
        this support by allowing unmodified concrete types to behave in a runtime
        polymorphic manner. In this paper, we describe one implementation of the runtime
        concept idiom, in the domain of the C++ standard template library (STL). We
        describe and measure the performance of runtime-polymorphic analogs of several
        STL algorithms. We augment the runtime concept idiom by employing a dispatch
        mechanism that considers both type and concept information to maximize performance
        when selecting algorithm implementations. We use our implementation to demonstrate
        the effects of different compile-time vs. run-time algorithm selection choices,
        and we indicate where improved language and compiler support would be useful.",
        "venue": "ACM Symposium on Applied Computing", "year": 2008, "referenceCount":
        17, "citationCount": 22, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"],
        "publicationDate": "2008-03-16", "journal": {"pages": "171-177"}, "authors":
        [{"authorId": "1707965", "name": "P. Pirkelbauer"}, {"authorId": "2577312",
        "name": "Sean Parent"}, {"authorId": "34619639", "name": "Mat Marcus"}, {"authorId":
        "1706320", "name": "B. Stroustrup"}]}, {"paperId": "30396838bf4c4c47ce714960021d7a21964b7ea0",
        "externalIds": {"MAG": "2183630747", "CorpusId": 61694682}, "corpusId": 61694682,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/30396838bf4c4c47ce714960021d7a21964b7ea0",
        "title": "IAP Distinguished Lecture", "abstract": "This Saturday (September
        20), the new ISO C++ standard, C++0x, will be voted out for public review.
        That means that the committee consider the standard feature complete and ready
        for nit picking. A good programming language is far more than a simple collection
        of features. My ideal is to provide a set of facilities that smoothly work
        together to support design and programming styles of a generality beyond my
        imagination. Here, I briefly outline rules of thumb (guidelines, principles),
        with examples, that are being applied in the design of C++0x. Then, I give
        two large examples of new language features: concepts and generalized initialization.
        Since there are far more proposals than could be presented in an hour, I''ll
        take questions.", "venue": "", "year": 2008, "referenceCount": 0, "citationCount":
        0, "influentialCitationCount": 0, "isOpenAccess": false, "openAccessPdf":
        null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category":
        "Computer Science", "source": "external"}, {"category": "Computer Science",
        "source": "s2-fos-model"}], "publicationTypes": ["Review"], "publicationDate":
        null, "journal": {"volume": "", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "430f866f9b12d53ef2d46dd7f52b828c91b2f6f0",
        "externalIds": {"MAG": "2132699316", "CorpusId": 62003369}, "corpusId": 62003369,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/430f866f9b12d53ef2d46dd7f52b828c91b2f6f0",
        "title": "Runtime Concepts for the C++ STL", "abstract": null, "venue": "",
        "year": 2008, "referenceCount": 12, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": null, "journal": {"volume": "",
        "name": ""}, "authors": [{"authorId": "1707965", "name": "P. Pirkelbauer"},
        {"authorId": "2577312", "name": "Sean Parent"}, {"authorId": "34619639", "name":
        "Mat Marcus"}, {"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId":
        "4d56dd7e1638a71dfda03782c8a264f968d94848", "externalIds": {"MAG": "2989523916",
        "CorpusId": 209073649}, "corpusId": 209073649, "publicationVenue": null, "url":
        "https://www.semanticscholar.org/paper/4d56dd7e1638a71dfda03782c8a264f968d94848",
        "title": "What Makes the History of Software Hard", "abstract": null, "venue":
        "", "year": 2008, "referenceCount": 7, "citationCount": 3, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}], "publicationTypes": null, "publicationDate": null, "journal":
        {"volume": "", "name": ""}, "authors": [{"authorId": "1688343", "name": "R.
        Kling"}, {"authorId": "1736292", "name": "W. Scacchi"}, {"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "67a7239fca42015fa4e7f59f894239e2b40d01b0",
        "externalIds": {"MAG": "2159185502", "DBLP": "conf/isorc/DechevMSW08", "DOI":
        "10.1109/ISORC.2008.20", "CorpusId": 7257802}, "corpusId": 7257802, "publicationVenue":
        {"id": "b7478691-8468-4053-b828-4b261de2bf96", "name": "IEEE International
        Symposium on Real-Time Distributed Computing", "type": "conference", "alternate_names":
        ["Int Symp Object/component/service-oriented Real-time Distrib Comput", "ISORC",
        "International Symposium on Object/Component/Service-Oriented Real-Time Distributed
        Computing", "IEEE Int Symp Real-time Distrib Comput"], "url": "https://ieeexplore.ieee.org/xpl/conhome/1000514/all-proceedings"},
        "url": "https://www.semanticscholar.org/paper/67a7239fca42015fa4e7f59f894239e2b40d01b0",
        "title": "C++ Dynamic Cast in Autonomous Space Systems", "abstract": "The
        dynamic cast operation allows flexibility in the design and use of data management
        facilities in object- oriented programs. Dynamic cast has an important role
        in the implementation of the data management services (DMS) of the mission
        data system project (MDS), the jet propulsion laboratory''s experimental work
        for providing a state-based and goal-oriented unified architecture for testing
        and development of mission software. DMS is responsible for the storage and
        transport of control and scientific data in a remote autonomous spacecraft.
        Like similar operators in other languages, the C++ dynamic cast operator does
        not provide the timing guarantees needed for hard real-time embedded systems.
        In a recent study, Gibbs and Stroustrup (G&S) devised a dynamic cast implementation
        strategy that guarantees fast constant-time performance. This paper presents
        the definition and application of a co-simulation framework to formally verify
        and evaluate the G&S fast dynamic casting scheme and its applicability in
        the mission data system DMS application. We describe the systematic process
        of model-based simulation and analysis that has lead to performance improvement
        of the G&S algorithm''s heuristics by about a factor of 2.", "venue": "IEEE
        International Symposium on Real-Time Distributed Computing", "year": 2008,
        "referenceCount": 21, "citationCount": 0, "influentialCitationCount": 0, "isOpenAccess":
        false, "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"],
        "publicationDate": "2008-05-05", "journal": {"pages": "499-507", "name": "2008
        11th IEEE International Symposium on Object and Component-Oriented Real-Time
        Distributed Computing (ISORC)"}, "authors": [{"authorId": "1778664", "name":
        "D. Dechev"}, {"authorId": "38933347", "name": "R. Mahapatra"}, {"authorId":
        "1706320", "name": "B. Stroustrup"}, {"authorId": "2150584325", "name": "D.
        Wagner"}]}, {"paperId": "86e1515db53dcca67d1d9f62f26b8d5449ab0d60", "externalIds":
        {"DBLP": "journals/jcse/DechevMS08", "MAG": "2009152634", "DOI": "10.5626/jcse.2008.2.4.375",
        "CorpusId": 18491515}, "corpusId": 18491515, "publicationVenue": {"id": "8ef352ff-f009-488c-8669-83bbc68d651c",
        "name": "Journal of Computing Science and Engineering", "type": "journal",
        "alternate_names": ["J Comput Sci Eng", "Journal of computational science
        and engineering", "J comput sci  eng", "Journal of computing science and engineering",
        "Journal of computational science & engineering", "J comput sci eng"], "issn":
        "1976-4677", "alternate_issns": ["1710-4068", "2093-8020", "2050-2311"], "url":
        "http://jcse.kiise.org/"}, "url": "https://www.semanticscholar.org/paper/86e1515db53dcca67d1d9f62f26b8d5449ab0d60",
        "title": "Practical and Verifiable C++ Dynamic Cast for Hard Real-Time Systems",
        "abstract": "The dynamic cast operation allows flexibility in the design and
        use of data management facilities in object-oriented programs. Dynamic cast
        has an important role in the implementation of the Data Management Services
        (DMS) of the Mission Data System Project (MDS), the Jet Propulsion Laboratory\u2019s
        experimental work for providing a state-based and goal-oriented unified architecture
        for testing and development of mission software. DMS is responsible for the
        storage and transport of control and scientific data in a remote autonomous
        spacecraft. Like similar operators in other languages, the C++ dynamic cast
        operator does not provide the timing guarantees needed for hard real-time
        embedded systems. In a recent study, Gibbs and Stroustrup (G&S) devised a
        dynamic cast implementation strategy that guarantees fast constant-time performance.
        This paper presents the definition and application of a cosimulation framework
        to formally verify and evaluate the G&S fast dynamic casting scheme and its
        applicability in the Mission Data System DMS application. We describe the
        systematic process of model-based simulation and analysis that has led to
        performance improvement of the G&S algorithm\u2019s heuristics by about a
        factor of 2. In this work we introduce and apply a library for extracting
        semantic information from C++ source code that helps us deliver a practical
        and verifiable implementation of the fast dynamic casting algorithm.", "venue":
        "Journal of Computing Science and Engineering", "year": 2008, "referenceCount":
        25, "citationCount": 3, "influentialCitationCount": 0, "isOpenAccess": true,
        "openAccessPdf": {"url": "http://society.kisti.re.kr/sv/SV_svpsbs03V.do?method=download&cn1=JAKO200807841288868",
        "status": null}, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"],
        "publicationDate": "2008-12-31", "journal": {"volume": "2", "pages": "375-393",
        "name": "J. Comput. Sci. Eng."}, "authors": [{"authorId": "1778664", "name":
        "D. Dechev"}, {"authorId": "38933347", "name": "R. Mahapatra"}, {"authorId":
        "1706320", "name": "B. Stroustrup"}]}, {"paperId": "d1f73d7c073c8c5547082001cf5c6db156ac479c",
        "externalIds": {"MAG": "1558288195", "CorpusId": 60689016}, "corpusId": 60689016,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/d1f73d7c073c8c5547082001cf5c6db156ac479c",
        "title": "Programming: Principles and Practice Using C++", "abstract": "An
        Introduction to Programming by the Inventor of C++ Preparation for Programming
        in the Real World The book assumes that you aim eventually to write non-trivial
        programs, whether for work in software development or in some other technical
        field. Focus on Fundamental Concepts and Techniques The book explains fundamental
        concepts and techniques in greater depth than traditional introductions. This
        approach will give you a solid foundation for writing useful, correct, maintainable,
        and efficient code. Programming with Todays C++ The book is an introduction
        to programming in general, including object-oriented programming and generic
        programming. It is also a solid introduction to the C++ programming language,
        one of the most widely used languages for real-world software. The book presents
        modern C++ programming techniques from the start, introducing the C++ standard
        library to simplify programming tasks. For BeginnersAnd Anyone Who Wants to
        Learn Something New The book is primarily designed for people who have never
        programmed before, and it has been tested with more than 1,000 first-year
        university students. However, practitioners and advanced students will gain
        new insight and guidance by seeing how a recognized master approaches the
        elements of his art. Provides a Broad View The first half of the book covers
        a wide range of essential concepts, design and programming techniques, language
        features, and libraries. Those will enable you to write programs involving
        input, output, computation, and simple graphics. The second half explores
        more specialized topics, such as text processing and testing, and provides
        abundant reference material. Source code and support supplements are available
        from the authors website.", "venue": "", "year": 2008, "referenceCount": 0,
        "citationCount": 79, "influentialCitationCount": 2, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate":
        "2008-12-25", "journal": {"volume": "", "name": ""}, "authors": [{"authorId":
        "1706320", "name": "B. Stroustrup"}]}, {"paperId": "e8cfacb4856a73be75118525fa394177b669bae6",
        "externalIds": {"MAG": "2101990932", "DBLP": "conf/autonomics/DechevRPS08",
        "DOI": "10.1145/1487652.1487685", "CorpusId": 15724878}, "corpusId": 15724878,
        "publicationVenue": {"id": "98927ab5-5e92-4457-879a-b2c1b801b770", "name":
        "Autonomic Computing and Communication Systems", "type": "conference", "alternate_names":
        ["Auton Comput Commun Syst", "Autonomics"], "url": "http://www.autonomics.eu/"},
        "url": "https://www.semanticscholar.org/paper/e8cfacb4856a73be75118525fa394177b669bae6",
        "title": "Verification and semantic parallelization of goal-driven autonomous
        software", "abstract": "Future space missions such as the Mars Science Laboratory
        demand the engineering of some of the most complex man-rated autonomous software
        systems. According to some recent estimates, the certification cost for mission-critical
        software exceeds its development cost. The current process-oriented methodologies
        do not reach the level of detail of providing guidelines for the development
        and validation of concurrent software. Time and concurrency are the most critical
        notions in an autonomous space system. In this work we present the design
        and implementation of a first concurrency and time centered framework for
        verification and semantic parallelization of real-time C++ within the JPL
        Mission Data System Framework (MDS). The end goal of the industrial project
        that motivated our work is to provide certification artifacts and accelerated
        testing of the complex software interactions in autonomous flight systems.
        As a case study we demonstrate the verification and semantic parallelization
        of the MDS Goal Networks.", "venue": "Autonomic Computing and Communication
        Systems", "year": 2008, "referenceCount": 27, "citationCount": 9, "influentialCitationCount":
        0, "isOpenAccess": true, "openAccessPdf": {"url": "http://eudl.eu/pdf/10.4108/ICST.AUTONOMICS2008.4354",
        "status": null}, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"],
        "publicationDate": "2008-09-23", "journal": {"pages": "33"}, "authors": [{"authorId":
        "1778664", "name": "D. Dechev"}, {"authorId": "2158900", "name": "N. Rouquette"},
        {"authorId": "1707965", "name": "P. Pirkelbauer"}, {"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "ecbcfc899df265f6c993302f70fef25efd12ed35",
        "externalIds": {"MAG": "2740853285", "CorpusId": 57949850}, "corpusId": 57949850,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/ecbcfc899df265f6c993302f70fef25efd12ed35",
        "title": "for Hard Real-Time Systems", "abstract": null, "venue": "", "year":
        2008, "referenceCount": 19, "citationCount": 14, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}], "publicationTypes": null, "publicationDate": null, "journal":
        {"volume": "", "name": ""}, "authors": [{"authorId": "1778664", "name": "D.
        Dechev"}, {"authorId": "38933347", "name": "R. Mahapatra"}, {"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "126538e02b2a0880b0c42ec253bd5ac57ef45760",
        "externalIds": {"CorpusId": 11234560}, "corpusId": 11234560, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/126538e02b2a0880b0c42ec253bd5ac57ef45760",
        "title": "Using ownership types to support library aliasing boundaries", "abstract":
        "This paper describes a library for concurrency used in a 10developer videogame
        project. The developers were inexperienced, yet there were no problems with
        data races in the multi-threaded application. We credit this to the explicit
        representation of ownership in the design of the library. Correct library
        usage implies aliasing boundaries which bear a strong resemblance to the ownersas-dominators
        property enforced by ownership types. We explore other situations where analogous
        aliasing boundaries exist and discuss a family of related libraries that could
        benefit from a design explicitly representing ownership. The ownership relations
        in the library currently have no support from the type system. We examine
        approaches to embed static checking of the aliasing boundaries in our implementation
        language, C ++.", "venue": "", "year": 2007, "referenceCount": 30, "citationCount":
        0, "influentialCitationCount": 0, "isOpenAccess": false, "openAccessPdf":
        null, "fieldsOfStudy": null, "s2FieldsOfStudy": [{"category": "Computer Science",
        "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate": null,
        "journal": null, "authors": [{"authorId": "145001854", "name": "Luke Wagner"},
        {"authorId": "2832673", "name": "Jaakko J\u00e4rvi"}, {"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "3710838c07fca4a6e55af64b1a7d1c563e3f04a7",
        "externalIds": {"DBLP": "conf/gpce/PirkelbauerSS07", "MAG": "2116159385",
        "DOI": "10.1145/1289971.1289993", "CorpusId": 9329095}, "corpusId": 9329095,
        "publicationVenue": {"id": "42ba2c5a-a60c-4306-988d-ff0928f95afa", "name":
        "International Conference on Generative Programming: Concepts and Experiences",
        "type": "conference", "alternate_names": ["Generative Programming and Component
        Engineering", "Gener Program Compon Eng", "GPCE", "Int Conf Gener Program
        Concept Exp"], "url": "https://dl.acm.org/conference/gpce"}, "url": "https://www.semanticscholar.org/paper/3710838c07fca4a6e55af64b1a7d1c563e3f04a7",
        "title": "Open multi-methods for c++", "abstract": "Multiple dispatch - the
        selection of a function to be invoked based on the dynamic type of two or
        more arguments - is a solution to several classical problems in object-oriented
        programming. Open multi-methods generalize multiple dispatch towards open-class
        extensions, which improve separation of concerns and provisions for retroactive
        design. We present the rationale, design, implementation, and performance
        of a language feature, called open multi-methods, for C++. Our open multi-methods
        support both repeated and virtual inheritance. Our call resolution rules generalize
        both virtual function dispatch and overload resolution semantics. After using
        all information from argument types, these rules can resolve further ambiguities
        by using covariant return types. Great care was taken to integrate open multi-methods
        with existing C++ language features and rules. We describe a model implementation
        and compare its performance and space requirements to existing open multi-method
        extensions and workaround techniques for C++. Compared to these techniques,
        our approach is simpler to use, catches more user mistakes, and resolves more
        ambiguities through link-time analysis, runs significantly faster, and requires
        less memory. In particular, the runtime cost of calling an open multi method
        is constant and less than the cost of a double dispatch (two virtual function
        calls). Finally, we provide a sketch of a design for open multi-methods in
        the presence of dynamic loading and linking of libraries.", "venue": "International
        Conference on Generative Programming: Concepts and Experiences", "year": 2007,
        "referenceCount": 45, "citationCount": 27, "influentialCitationCount": 0,
        "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle"], "publicationDate": "2007-10-01", "journal":
        {"pages": "123-134"}, "authors": [{"authorId": "1707965", "name": "P. Pirkelbauer"},
        {"authorId": "2307401", "name": "Yuriy Solodkyy"}, {"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "682f7ea24c6e3d0c43f00fd900704d6f53696480",
        "externalIds": {"MAG": "2171780954", "CorpusId": 124419339}, "corpusId": 124419339,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/682f7ea24c6e3d0c43f00fd900704d6f53696480",
        "title": "Proposed Wording for Concepts (Revision 3)", "abstract": "Introduction
        This document provides proposed wording for concepts. Readers unfamiliar with
        concepts are encouraged to read the complete proposal [1]. This document provides
        wording for changes to the core language. Changes to the standard library
        are discussed in separate documents: \u2014 Concepts for the C++0x Standard
        Library: Approach [N2036=06-0106] \u2014 Concepts for the C++0x Standard Library:
        Introduction [N2037=06-0107] \u2014 Concepts for the C++0x Standard Library:
        Utilities (Revision 2) [N2322=07-0182] \u2014 Concepts for the C++0x Standard
        Library: Containers [N2085=06-0155] \u2014 Concepts for the C++0x Standard
        Library: Iterators (Revision 2) [N2323=07-0183] \u2014 Concepts for the C++0x
        Standard Library: Algorithms (Revision 1) [N2084=06-0154] \u2014 Concepts
        for the C++0x Standard Library: Numerics [N2041=06-0111]", "venue": "", "year":
        2007, "referenceCount": 3, "citationCount": 30, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": null, "journal": {"volume": "",
        "name": ""}, "authors": [{"authorId": "2956177", "name": "Douglas P. Gregor"},
        {"authorId": "1706320", "name": "B. Stroustrup"}, {"authorId": "2274043",
        "name": "Jeremy G. Siek"}, {"authorId": "48824718", "name": "J. Widman"}]},
        {"paperId": "87190aec6a1befeac0d2b1d2dc9555e1235919df", "externalIds": {"CorpusId":
        14136947}, "corpusId": 14136947, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/87190aec6a1befeac0d2b1d2dc9555e1235919df",
        "title": "Report on language support for Multi-Methods and Open-Methods for
        C++", "abstract": "Multiple dispatch \u2013 the selection of a function to
        be invoked based on the dynamic type of two or more arguments \u2013 is a
        solution to several classical problems in object-oriented programm ing. We
        present the rationale, design, and implementation of a lang u ge feature,
        called open multi-methods, for C ++. Open multi-methods support both repeated
        and virtual inheritance and our call reso lution rules generalize both virtual
        function dispatch and overlo ad resolution semantics. After using all information
        from argumen t types, these rules can resolve further ambiguities by using
        covari ant return types. We describe a model implementation and compare i
        ts performance and space requirements to existing open multiethod extensions
        and workaround techniques for C ++. Compared to these techniques, our approach
        is simpler to use, catches more use mi takes (such as ambiguities), performs
        significantly better , and requires less memory. For example, our implementation
        of a mul timethod call is constant-time and more than twice as fast as do
        uble dispatch only 4% slower than a C ++ virtual function call. Finally, we
        provide a sketch of a design for open multi-methods in the p resence of dynamic
        loading and linking of libraries.", "venue": "", "year": 2007, "referenceCount":
        36, "citationCount": 1, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy": [{"category":
        "Computer Science", "source": "s2-fos-model"}], "publicationTypes": null,
        "publicationDate": null, "journal": null, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}, {"authorId": "1707965", "name": "P. Pirkelbauer"},
        {"authorId": "2307401", "name": "Yuriy Solodkyy"}]}, {"paperId": "ba49c311278c079272484bfb5cb01ac8d023a6d9",
        "externalIds": {"MAG": "2065507335", "DBLP": "conf/hopl/Stroustrup07", "DOI":
        "10.1145/1238844.1238848", "CorpusId": 7518369}, "corpusId": 7518369, "publicationVenue":
        {"id": "692921ea-1576-45da-95ab-1f8ab6348a8a", "name": "History of Programming
        Languages", "type": "conference", "alternate_names": ["ACM SIGPLAN conf Hist
        Program Lang", "ACM SIGPLAN conference on History of Programming Languages",
        "HOPL", "Hist Program Lang"], "url": "https://en.wikipedia.org/wiki/History_of_Programming_Languages"},
        "url": "https://www.semanticscholar.org/paper/ba49c311278c079272484bfb5cb01ac8d023a6d9",
        "title": "Evolving a language in and for the real world: C++ 1991-2006", "abstract":
        "This paper outlines the history of the C++ programming language from the
        early days of its ISO standardization (1991), through the 1998 ISO standard,
        to the later stages of the C++0x revision of that standard (2006). The emphasis
        is on the ideals, constraints, programming techniques, and people that shaped
        the language, rather than the minutiae of language features. Among the major
        themes are the emergence of generic programming and the STL (the C++ standard
        library''s algorithms and containers). Specific topics include separate compilation
        of templates, exception handling, and support for embedded systems programming.
        During most of the period covered here, C++ was a mature language with millions
        of users. Consequently, this paper discusses various uses of C++ and the technical
        and commercial pressures that provided the background for its continuing evolution.",
        "venue": "History of Programming Languages", "year": 2007, "referenceCount":
        159, "citationCount": 68, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle",
        "Book", "Conference"], "publicationDate": "2007-06-09", "journal": {"name":
        "Proceedings of the third ACM SIGPLAN conference on History of programming
        languages"}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "bd77374506400899df61c24bc88513a695a84975", "externalIds": {"DBLP":
        "books/daglib/0019344", "MAG": "173430605", "CorpusId": 43907174}, "corpusId":
        43907174, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/bd77374506400899df61c24bc88513a695a84975",
        "title": "The C++ programming language - special edition (3. ed.)", "abstract":
        null, "venue": "", "year": 2007, "referenceCount": 0, "citationCount": 19,
        "influentialCitationCount": 3, "isOpenAccess": false, "openAccessPdf": null,
        "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category": "Computer
        Science", "source": "external"}, {"category": "Computer Science", "source":
        "s2-fos-model"}], "publicationTypes": null, "publicationDate": null, "journal":
        {"pages": "I-X, 1-1020"}, "authors": [{"authorId": "1706320", "name": "B.
        Stroustrup"}]}, {"paperId": "c6eaafa80f5cca5e5678cc5096b57aa4673b68c6", "externalIds":
        {"MAG": "2102767886", "CorpusId": 62202017}, "corpusId": 62202017, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/c6eaafa80f5cca5e5678cc5096b57aa4673b68c6",
        "title": "Proposed Wording for Concepts", "abstract": "Introduction This document
        provides proposed wording for concepts. Readers unfamiliar with concepts are
        encouraged to read the complete proposal [1]. It is recommended that readers
        \u201ctour\u201d this concepts wording using N2399=07-0259, which provides
        an examples-directed view of the major language features involved in concepts,
        cross-referenced with this document. This document provides wording for changes
        to the core language. Changes to the standard library are discussed in separate
        documents: \u2014 Concepts for the C++0x Standard Library: Approach [N2036=06-0106]
        \u2014 Concepts for the C++0x Standard Library: Introduction [N2037=06-0107]
        \u2014 Core Concepts for the C++0x Standard Library [N2502=08-0012] \u2014
        Concepts for the C++0x Standard Library: Utilities (Revision 2) [N2322=07-0182]
        \u2014 Concepts for the C++0x Standard Library: Containers [N2085=06-0155]
        \u2014 Iterator Concepts for the C++0x Standard Library [N2500=08-0010] \u2014
        Concepts for the C++0x Standard Library: Iterators (Revision 2) [N2323=07-0183]
        \u2014 Concepts for the C++0x Standard Library: Algorithms (Revision 1) [N2084=06-0154]
        \u2014 Concepts for the C++0x Standard Library: Numerics [N2041=06-0111]",
        "venue": "", "year": 2007, "referenceCount": 38, "citationCount": 13, "influentialCitationCount":
        1, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": null, "journal": {"volume": "",
        "name": ""}, "authors": [{"authorId": "2956177", "name": "Douglas P. Gregor"},
        {"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId": "cdaccb20f518fce93dc417fe13af130e1f48813f",
        "externalIds": {"DBLP": "conf/hase/CookSP07", "MAG": "2135728859", "DOI":
        "10.1109/HASE.2007.54", "CorpusId": 33986371}, "corpusId": 33986371, "publicationVenue":
        {"id": "3429a9e8-7368-4a15-b97d-c05fb309fa4c", "name": "IEEE International
        Symposium on High-Assurance Systems Engineering", "type": "conference", "alternate_names":
        ["High-assurance Syst Eng", "IEEE Int Symp High-assurance Syst Eng", "HASE",
        "High-Assurance Systems Engineering"], "url": "http://www.wikicfp.com/cfp/program?id=1171"},
        "url": "https://www.semanticscholar.org/paper/cdaccb20f518fce93dc417fe13af130e1f48813f",
        "title": "An Early-Reply Based Framework: Reliable Concurrency that Is Verifiable",
        "abstract": "Despite its widespread use, concurrent programming is still plagued
        by reliability problems, such as race conditions and deadlock, not found in
        sequential programs. We present a concurrency framework to help developers
        avoid these error conditions, and make it possible to verify their absence
        through static analysis.", "venue": "IEEE International Symposium on High-Assurance
        Systems Engineering", "year": 2007, "referenceCount": 11, "citationCount":
        2, "influentialCitationCount": 0, "isOpenAccess": false, "openAccessPdf":
        null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category":
        "Computer Science", "source": "external"}, {"category": "Computer Science",
        "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"], "publicationDate":
        "2007-11-14", "journal": {"pages": "405-406", "name": "10th IEEE High Assurance
        Systems Engineering Symposium (HASE''07)"}, "authors": [{"authorId": "2056926746",
        "name": "S. Cook"}, {"authorId": "1706320", "name": "B. Stroustrup"}, {"authorId":
        "2092661", "name": "S. M. Pike"}]}, {"paperId": "3f566ae993364bfc435e9ef34e995af8a1a079e8",
        "externalIds": {"DBLP": "journals/spe/GibbsS06", "MAG": "2080670657", "DOI":
        "10.1002/spe.686", "CorpusId": 15371290}, "corpusId": 15371290, "publicationVenue":
        {"id": "3da56ce6-4a70-402c-a8b0-7dd39a3273d3", "name": "Software, Practice
        & Experience", "type": "journal", "alternate_names": ["Softw  Pract Exp",
        "Softw Pract  Exp", "Software - Practice and Experience"], "issn": "0038-0644",
        "url": "http://www3.interscience.wiley.com/cgi-bin/jhome/1752", "alternate_urls":
        ["http://www.interscience.wiley.com/jpages/0038-0644/", "https://onlinelibrary.wiley.com/journal/1097024X"]},
        "url": "https://www.semanticscholar.org/paper/3f566ae993364bfc435e9ef34e995af8a1a079e8",
        "title": "Fast dynamic casting", "abstract": "We describe a scheme for implementing
        dynamic casts suitable for systems where the performance and predictability
        of performance is essential. A dynamic cast from a base class to a derived
        class in an object\u2010oriented language can be performed quickly by having
        the linker assign an integer type ID to each class. A simple integer arithmetic
        operation verifies whether the cast is legal at run time. The type ID scheme
        presented uses the modulo function to check that one class derives from another.
        A 64\u2010bit type ID is sufficient to handle class hierarchies of large size
        at least nine levels of derivation deep. We also discuss the pointer adjustments
        required for a C++ dynamic_cast. All examples will be drawn from the C++ language.
        Copyright \u00a9 2005 John Wiley & Sons, Ltd.", "venue": "Software, Practice
        & Experience", "year": 2006, "referenceCount": 6, "citationCount": 18, "influentialCitationCount":
        1, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Mathematics", "source": "s2-fos-model"}], "publicationTypes":
        ["JournalArticle"], "publicationDate": "2006-02-01", "journal": {"volume":
        "36", "name": "Software: Practice and Experience"}, "authors": [{"authorId":
        "2065723600", "name": "Michael Gibbs"}, {"authorId": "1706320", "name": "B.
        Stroustrup"}]}, {"paperId": "43913a70c2226c853b1e0a45bcb87c7b711d7212", "externalIds":
        {"MAG": "2133625592", "DBLP": "conf/oopsla/GregorJSSRL06", "DOI": "10.1145/1167473.1167499",
        "CorpusId": 895192}, "corpusId": 895192, "publicationVenue": {"id": "de124794-a8b5-43ce-b740-7643c17bb1ea",
        "name": "Conference on Object-Oriented Programming Systems, Languages, and
        Applications", "type": "conference", "alternate_names": ["OOPSLA", "Conf Object-oriented
        Program Syst Lang Appl"]}, "url": "https://www.semanticscholar.org/paper/43913a70c2226c853b1e0a45bcb87c7b711d7212",
        "title": "Concepts: linguistic support for generic programming in C++", "abstract":
        "Generic programming has emerged as an important technique for the development
        of highly reusable and efficient software libraries. In C++, generic programming
        is enabled by the flexibility of templates, the C++ type parametrization mechanism.
        However, the power of templates comes with a price: generic (template) libraries
        can be more difficult to use and develop than non-template libraries and their
        misuse results in notoriously confusing error messages. As currently defined
        in C++98, templates are unconstrained, and type-checking of templates is performed
        late in the compilation process, i.e., after the use of a template has been
        combined with its definition. To improve the support for generic programming
        in C++, we introduce concepts to express the syntactic and semantic behavior
        of types and to constrain the type parameters in a C++ template. Using concepts,
        type-checking of template definitions is separated from their uses, thereby
        making templates easier to use and easier to compile. These improvements are
        achieved without limiting the flexibility of templates or decreasing their
        performance - in fact their expressive power is increased. This paper describes
        the language extensions supporting concepts, their use in the expression of
        the C++ Standard Template Library, and their implementation in the ConceptGCC
        compiler. Concepts are candidates for inclusion in the upcoming revision of
        the ISO C++ standard, C++0x.", "venue": "Conference on Object-Oriented Programming
        Systems, Languages, and Applications", "year": 2006, "referenceCount": 72,
        "citationCount": 228, "influentialCitationCount": 15, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"],
        "publicationDate": "2006-10-16", "journal": {"pages": "291-310"}, "authors":
        [{"authorId": "2956177", "name": "Douglas P. Gregor"}, {"authorId": "2832673",
        "name": "Jaakko J\u00e4rvi"}, {"authorId": "2274043", "name": "Jeremy G. Siek"},
        {"authorId": "1706320", "name": "B. Stroustrup"}, {"authorId": "145668248",
        "name": "G. D. Reis"}, {"authorId": "143962909", "name": "A. Lumsdaine"}]},
        {"paperId": "58183c51a14662095957a0af67b13a83c45bf413", "externalIds": {"MAG":
        "2185781157", "CorpusId": 264278354}, "corpusId": 264278354, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/58183c51a14662095957a0af67b13a83c45bf413",
        "title": "Lambda expressions and closures for C", "abstract": "This proposal
        describes a design for direct support for lambda expressions in C++. The design
        space for lambda expressions is large, and involves many tradeoffs. We include
        a thorough discussion of the benefits and the drawbacks of our design. In
        addition, we describe several other viable alternatives that warrant consideration.",
        "venue": "", "year": 2006, "referenceCount": 6, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Mathematics"],
        "s2FieldsOfStudy": [{"category": "Mathematics", "source": "external"}, {"category":
        "Art", "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate":
        null, "journal": {"volume": "", "name": ""}, "authors": [{"authorId": "144233173",
        "name": "Jeremiah Willcock"}, {"authorId": "1706320", "name": "B. Stroustrup"},
        {"authorId": "143962909", "name": "A. Lumsdaine"}]}, {"paperId": "a2975daae9ad05d9b1e084021ccb153d35cdf8dc",
        "externalIds": {"MAG": "2478149971", "DBLP": "conf/opodis/DechevPS06", "DOI":
        "10.1007/11945529_11", "CorpusId": 18733266}, "corpusId": 18733266, "publicationVenue":
        {"id": "06d4ca88-254a-4c1a-b6a9-e31ab378e53a", "name": "International Conference
        on Principles of Distributed Systems", "type": "conference", "alternate_names":
        ["OPODIS", "Int Conf Princ Distrib Syst"], "url": "http://www.opodis.net/"},
        "url": "https://www.semanticscholar.org/paper/a2975daae9ad05d9b1e084021ccb153d35cdf8dc",
        "title": "Lock-Free Dynamically Resizable Arrays", "abstract": null, "venue":
        "International Conference on Principles of Distributed Systems", "year": 2006,
        "referenceCount": 33, "citationCount": 63, "influentialCitationCount": 4,
        "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": "2006-12-12",
        "journal": {"pages": "142-156"}, "authors": [{"authorId": "1778664", "name":
        "D. Dechev"}, {"authorId": "1707965", "name": "P. Pirkelbauer"}, {"authorId":
        "1706320", "name": "B. Stroustrup"}]}, {"paperId": "fbf25ee400933d680d9ff3fb7823fd10d2d135f0",
        "externalIds": {"MAG": "2139099489", "DBLP": "conf/popl/ReisS06", "DOI": "10.1145/1111037.1111064",
        "CorpusId": 2311211}, "corpusId": 2311211, "publicationVenue": {"id": "8a1922a5-8e84-4ec6-9283-01f2ef1981fc",
        "name": "ACM-SIGACT Symposium on Principles of Programming Languages", "type":
        "conference", "alternate_names": ["Symp Princ Program Lang", "Symposium on
        Principles of Programming Languages", "POPL", "ACM-SIGACT Symp Princ Program
        Lang"], "url": "http://www.sigplan.org/Conferences/POPL/"}, "url": "https://www.semanticscholar.org/paper/fbf25ee400933d680d9ff3fb7823fd10d2d135f0",
        "title": "Specifying C++ concepts", "abstract": "C++ templates are key to
        the design of current successful mainstream libraries and systems. They are
        the basis of programming techniques in diverse areas ranging from conventional
        general-purpose programming to software for safety-critical embedded systems.
        Current work on improving templates focuses on the notion of concepts (a type
        system for templates), which promises significantly improved error diagnostics
        and increased expressive power such as concept-based overloading and function
        template partial specialization. This paper presents C++ templates with an
        emphasis on problems related to separate compilation. We consider the problem
        of how to express concepts in a precise way that is simple enough to be usable
        by ordinary programmers. In doing so, we expose a few weakness of the current
        specification of the C++ standard library and suggest a far more precise and
        complete specification. We also present a systematic way of translating our
        proposed concept definitions, based on use-patterns rather than function signatures,
        into constraint sets that can serve as convenient basis for concept checking
        in a compiler.", "venue": "ACM-SIGACT Symposium on Principles of Programming
        Languages", "year": 2006, "referenceCount": 36, "citationCount": 119, "influentialCitationCount":
        7, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle"], "publicationDate": "2006-01-11", "journal":
        {"pages": "295-308"}, "authors": [{"authorId": "145668248", "name": "G. D.
        Reis"}, {"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId": "051a121ad6daddc18fe8dd08c633fdc3bfb224c6",
        "externalIds": {"MAG": "2186665374", "CorpusId": 62245458}, "corpusId": 62245458,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/051a121ad6daddc18fe8dd08c633fdc3bfb224c6",
        "title": "Rules of thumb for the design of C++0x", "abstract": "programming
        language is far more than a simple collection of features. My ideal is to
        provide a set of facilities that smoothly work together to support design
        and programming styles of a generality beyond my imagination. Here, I outline
        rules of thumb (guidelines, principles) that are being applied in the design
        of C++0x. For example, generality is preferred over specialization, novices
        as well as experts are supported, library extensions are preferred over language
        changes, compatibility with C++98 is emphasized, and evolution is preferred
        over radical breaks with the past. Since principles cannot be understood in
        isolation, I very briefly present a few of the proposals being considered
        in the ISO C++ standards committee.", "venue": "", "year": 2005, "referenceCount":
        9, "citationCount": 0, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate":
        null, "journal": {"volume": "", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "2fc5ef95c9c6286167552cf6a94c81f9cff0b4d7",
        "externalIds": {"MAG": "2182778461", "CorpusId": 61366871}, "corpusId": 61366871,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/2fc5ef95c9c6286167552cf6a94c81f9cff0b4d7",
        "title": "A concept design (Rev. 1)", "abstract": "We describe a design of
        \u201cconcepts\u201d (a type system for types) for improved support of generic
        programming in C++. This paper presents a current best-effort design based
        on previous work followed by lengthy discussions of technical details. The
        design is based on the principles that simple things should be simple (whereas
        more advanced programming techniques may require some extra work), that there
        should be no performance degradation compared to current template techniques,
        and that essentially all current template techniques should be improved by
        the use of concepts. The design achieves perfect checking of separately compiled
        templates at the cost of minor restrictions on the instantiation mechanism.",
        "venue": "", "year": 2005, "referenceCount": 8, "citationCount": 17, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": null, "journal": {"volume": "",
        "name": ""}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"},
        {"authorId": "145668248", "name": "G. D. Reis"}]}, {"paperId": "30c59d51a4a610de0df81eee6b4e743c41c3bca2",
        "externalIds": {"MAG": "2474341854", "CorpusId": 10562147}, "corpusId": 10562147,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/30c59d51a4a610de0df81eee6b4e743c41c3bca2",
        "title": "A rationale for semantically enhanced library languages", "abstract":
        "This paper presents the rationale for a novel approach to providing expressive,
        teachable, maintainable, and cost-effective special-purpose languages: A Semantically
        Enhanced Library Language (a SEL language or a SELL) is a dialect created
        by supersetting a language using a library and then subsetting the result
        using a tool that \u201cunderstands\u201d the syntax and semantics of both
        the underlying language and the library. The resulting language can be about
        as expressive as a specialpurpose language and provide as good semantic guarantees
        as a special-purpose language. However, a SELL can rely on the tool chain
        and user community of a major generalpurpose programming language. The examples
        of SELLs presented here (Safe C++, Parallel C++, and Real-time C++) are based
        on C++ and the Pivot program analysis and transformation infrastructure. As
        part of the rationale, the paper discusses practical problems with various
        popular approaches to providing special-purpose features, such as compiler
        options and preprocessors.", "venue": "", "year": 2005, "referenceCount":
        22, "citationCount": 22, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}, {"category": "Linguistics", "source":
        "s2-fos-model"}], "publicationTypes": null, "publicationDate": null, "journal":
        {"volume": "", "name": ""}, "authors": [{"authorId": "1706320", "name": "B.
        Stroustrup"}]}, {"paperId": "59d379a4f80440b3f7b664941145be15e48f27ab", "externalIds":
        {"MAG": "203347920", "CorpusId": 12499790}, "corpusId": 12499790, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/59d379a4f80440b3f7b664941145be15e48f27ab",
        "title": "A Formalism for C", "abstract": "In this paper, we develop a general
        formalism for describing the C++ programming language, and regular enough
        to cope with proposed extensions (such as concepts) for C++0x that affect
        its type system. Concepts are a mechanism for checking template arguments
        currently being developed to help cope with the massive use of templates in
        modern C++. The main challenges in developing a formalism for C++ are scoping,
        overriding, overloading, templates, specialization, and the C heritage exposed
        in the built-in types. Here, we primarily focus on templates and overloading.",
        "venue": "", "year": 2005, "referenceCount": 37, "citationCount": 10, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": null, "journal": {"volume": "",
        "name": ""}, "authors": [{"authorId": "145668248", "name": "G. D. Reis"},
        {"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId": "76669a17732fbc84e4f7f94ceb30ef34fa73c0cf",
        "externalIds": {"DBLP": "conf/lcpc/StroustrupR05", "MAG": "1936852846", "DOI":
        "10.1007/978-3-540-69330-7_33", "CorpusId": 11443290}, "corpusId": 11443290,
        "publicationVenue": {"id": "c720e66e-172e-4b70-9404-cec3caef951d", "name":
        "International Workshop on Languages and Compilers for Parallel Computing",
        "type": "conference", "alternate_names": ["Languages and Compilers for Parallel
        Computing", "LCPC", "Int Workshop Lang Compil Parallel Comput", "Lang Compil
        Parallel Comput"], "url": "http://www.lcpcworkshop.org/"}, "url": "https://www.semanticscholar.org/paper/76669a17732fbc84e4f7f94ceb30ef34fa73c0cf",
        "title": "Supporting SELL for High-Performance Computing", "abstract": null,
        "venue": "International Workshop on Languages and Compilers for Parallel Computing",
        "year": 2005, "referenceCount": 22, "citationCount": 21, "influentialCitationCount":
        1, "isOpenAccess": true, "openAccessPdf": {"url": "http://www.ece.lsu.edu/lcpc05/papers/lcpc05-paper-39.pdf",
        "status": null}, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"],
        "publicationDate": "2005-10-20", "journal": {"pages": "458-465"}, "authors":
        [{"authorId": "1706320", "name": "B. Stroustrup"}, {"authorId": "145668248",
        "name": "G. D. Reis"}]}, {"paperId": "eeee39677fcc72a5a37273a40a4a6914a48adda4",
        "externalIds": {"MAG": "2189575182", "CorpusId": 110351760}, "corpusId": 110351760,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/eeee39677fcc72a5a37273a40a4a6914a48adda4",
        "title": "The Design of C++0x Reinforcing C++''s proven strengths, while moving
        into the future", "abstract": null, "venue": "", "year": 2005, "referenceCount":
        2, "citationCount": 2, "influentialCitationCount": 1, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Engineering"], "s2FieldsOfStudy":
        [{"category": "Engineering", "source": "external"}], "publicationTypes": null,
        "publicationDate": null, "journal": {"volume": "", "name": ""}, "authors":
        [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId": "dcb38a10f1a634dc82b535527c58791dbae94429",
        "externalIds": {"DBLP": "conf/icess/Stroustrup04", "MAG": "2166877474", "DOI":
        "10.1007/11535409_1", "CorpusId": 29464138}, "corpusId": 29464138, "publicationVenue":
        {"id": "69f8f791-9ae1-4d0f-a535-d2ab94601dac", "name": "International Conference
        on Embedded Software and Systems", "type": "conference", "alternate_names":
        ["Int Conf Embed Softw Syst", "ICESS"], "url": "http://www.wikicfp.com/cfp/program?id=1359"},
        "url": "https://www.semanticscholar.org/paper/dcb38a10f1a634dc82b535527c58791dbae94429",
        "title": "Abstraction and the C++ Machine Model", "abstract": null, "venue":
        "International Conference on Embedded Software and Systems", "year": 2004,
        "referenceCount": 13, "citationCount": 27, "influentialCitationCount": 0,
        "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle"], "publicationDate": "2004-12-09", "journal":
        {"pages": "1-13"}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "1bac4d3eea176df7074a527a30c8d03a2ca6540f", "externalIds": {"MAG":
        "153520181", "CorpusId": 16939927}, "corpusId": 16939927, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/1bac4d3eea176df7074a527a30c8d03a2ca6540f",
        "title": "Literals for user-defined types", "abstract": "This note proposes
        a notion of user-defined literals based on literal constructors without requiring
        new syntax. If combined with the separate proposal for generalized initializer
        lists, it becomes a generalization of the C99 notion of compound literals.
        Basically, a constructor defines a user-defined literal if it is inline and
        specifies a simple mapping of its arguments to object representation values
        and is invoked with constant expressions or objects that can be trivially
        copied (such as pointers). The Problem C++ does not provide a way of defining
        literals for user-defined types. Instead, constructors are used. For example:
        15 // int literal \"15\" // string literal (zero terminated array of characters)
        complex(15) // \u201csort of complex literal\u201d When a constructor is simple
        and inlining is done well, such constructor calls provide a reasonable substitute
        for literals. However, a constructor is a very general construct and there
        have been many requests for a way to express literals for user-defined types
        in such a way that a programmer can be confident that a value will be constructed
        at compile time and potentially stored in ROM. For example: complex z(1,2);
        // the variable z can be constructed at compile time const complex cz(1,2);
        // the const cz can potentially be put in ROM A Solution The most direct and
        obvious solution would be to introduce syntax to distinguish a literal constructor
        and to distinguish literals of user-defined types. For example: class X {
        int x,y,z; public: literal X(int a, int b) :x(a+1),y(0),z(b) {} // literal
        constructor // ... }; X\"1,2\" // a literal of type X This syntax is just
        for the illustration of the idea; a better syntax is suggested below. This
        \u201cliteral constructor\u201d illustrates the requirements for any specification
        of a literal for a userdefined type. It specifies a (simple) mapping from
        a set of arguments to the representation of the type. Often, that will simply
        specify a value for each member of the type''s representation, but slight
        generalizations are possible and sometimes useful. Here, I have indicated
        that the member y''s value need not be specified by the user and that a slight
        transformation takes place on the argument used to specify a (x becomes a+1).
        The body is empty. Since the construction of the representation of a value
        takes place at compile time, very few constructs could reasonably be allowed
        in a literal constructor body. The simplest rule would be to require that
        body to be empty. That is, the mapping of arguments to representation (member
        values) must be specified as member initializers. In addition, a literal constructor
        must be inline. What can be accepted as an argument type? An argument must
        of a type that can be copied without the use of a nontrivial copy constructor
        (e.g. ints, pointers, and references). What can be accepted as an initializer?
        An initializer can be another argument, a value of a type that can be copied
        without the use of a non-trivial copy constructor, or a constant expression.
        Note that this definition is recursive in that it allows the use of literals
        of user defined types as arguments to be used. For example: class Y { complex
        x, y; literal X(complex a, int b) : x(a), y(complex\"a,0\") {} // ... }; const
        int c = 3; Y\"complex\"1,2\",c\"; This simple definition could be elaborated.
        For example, should we accept floating point expressions, such as d+1.7 where
        d is an argument of floating point type? I think not. Even if d is a literal
        so that the expression to be evaluated is something like 2.3+1.7, I suspect
        that the complication of requiring floating point arithmetic at compile time
        is not worth the bother \u2013 especially for cross compilers. Syntax for
        user-defined literals The syntax used to illustrate the idea of a \u201cliteral
        constructor\u201d above has some obvious problems. Consider that last use:
        const int c = 3; Y\"complex\"1,2\",c\"; That use of quotes (chosen to emphasize
        the literal nature of the construct) would clearly confuse any traditional
        lexer (and many human readers). Also, it doesn''t exactly extend to string
        literal arguments. Furthermore, it would not be easy to get used to the idea
        that elements of the string-like part are separate values and that variable
        can occur there. I think that a much more natural (i.e. familiar) and readable
        notation would use parentheses: const int c = 3; Y(complex(1,2),c); After
        all, parentheses are the way we usually express arguments. However, by doing
        so, we lost the syntactic distinction of the literal. That is,", "venue":
        "", "year": 2003, "referenceCount": 0, "citationCount": 1, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": null, "journal": {"volume": "",
        "name": ""}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "2bdd01edb4551bf4b08e6113b3201bceacebadf5", "externalIds": {"MAG":
        "28564631", "CorpusId": 117555699}, "corpusId": 117555699, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/2bdd01edb4551bf4b08e6113b3201bceacebadf5",
        "title": "Concepts \u2013 Design choices for template argument checking",
        "abstract": "This note presents problems, ideals, and design ideas for ways
        of checking template arguments. The aim is to simplify the writing and use
        of templates without loss of run-time performance or expressive power compared
        to the original template design while maintaining complete backwards compatibility
        with the original template design. A specification of the requirements on
        a set of template arguments is called a concept. Because specifying and using
        such requirements are central to thinking about templates, several apparently
        independent suggestions for language extensions, such as a uniform function
        call syntax, are also briefly presented.", "venue": "", "year": 2003, "referenceCount":
        16, "citationCount": 31, "influentialCitationCount": 2, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Mathematics"], "s2FieldsOfStudy":
        [{"category": "Mathematics", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate":
        null, "journal": {"volume": "", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}, {"authorId": "145668248", "name": "G. D. Reis"}]},
        {"paperId": "a2be43ce0ad84d77cfc88d535a61f765e9442f0e", "externalIds": {"MAG":
        "2048055486", "DBLP": "journals/spe/AusternSTW03", "DOI": "10.1002/spe.564",
        "CorpusId": 35319185}, "corpusId": 35319185, "publicationVenue": {"id": "3da56ce6-4a70-402c-a8b0-7dd39a3273d3",
        "name": "Software, Practice & Experience", "type": "journal", "alternate_names":
        ["Softw  Pract Exp", "Softw Pract  Exp", "Software - Practice and Experience"],
        "issn": "0038-0644", "url": "http://www3.interscience.wiley.com/cgi-bin/jhome/1752",
        "alternate_urls": ["http://www.interscience.wiley.com/jpages/0038-0644/",
        "https://onlinelibrary.wiley.com/journal/1097024X"]}, "url": "https://www.semanticscholar.org/paper/a2be43ce0ad84d77cfc88d535a61f765e9442f0e",
        "title": "Untangling the balancing and searching of balanced binary search
        trees", "abstract": "A balanced binary search tree can be characterized by
        two orthogonal issues: its search strategy and its balancing strategy. In
        this paper, we show how to decouple search and balancing strategies so that
        they can be expressed independently of each other, communicating only by basic
        operations such as rotations. Different balancing strategies, such as red\u2013black
        trees and splay trees, and different search applications, such as key search
        and rank search, can be combined arbitrarily. As a new result, we show how
        optimal string search can be expressed as a search application on any balanced
        binary tree.", "venue": "Software, Practice & Experience", "year": 2003, "referenceCount":
        18, "citationCount": 10, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"],
        "publicationDate": "2003-11-10", "journal": {"volume": "33", "name": "Software:
        Practice and Experience"}, "authors": [{"authorId": "2268793", "name": "Matthew
        H. Austern"}, {"authorId": "1706320", "name": "B. Stroustrup"}, {"authorId":
        "1695440", "name": "M. Thorup"}, {"authorId": "2056941010", "name": "John
        Wilkinson"}]}, {"paperId": "02281528c22ad58d8987a6e4d74569def7898c5e", "externalIds":
        {"MAG": "1558234533", "DOI": "10.1063/1.1405256", "CorpusId": 60474419}, "corpusId":
        60474419, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/02281528c22ad58d8987a6e4d74569def7898c5e",
        "title": "Speaking C++ as a native", "abstract": "C++ supports several styles
        (\u201cmultiple paradigms\u201d) of programming. This allows great flexibility,
        notational convenience, maintainability, and close-to-optimal performance.
        Programmers who don\u2019t know the basic native C++ styles and techniques
        \u201cspeak\u201d C++ with a thick accent, limiting themselves to relatively
        restrictive pidgin dialects. Here, I present language features such as classes,
        class hierarchies, abstract classes, and templates, together with the fundamental
        programming styles they support. In particular, I show how to provide generic
        algorithms, function objects, access objects, and delayed evaluation as needed
        to build and use flexible and efficient libraries. The aim is to give an idea
        of what\u2019s possible to provide, and some understanding of the fundamental
        techniques of modern C++ libraries.", "venue": "", "year": 2002, "referenceCount":
        1, "citationCount": 1, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate":
        "2002-01-29", "journal": {"volume": "583", "pages": "11-21", "name": ""},
        "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId":
        "1468f4d31934c08b56637f557bdad5ffc6639482", "externalIds": {"CorpusId": 11163139},
        "corpusId": 11163139, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/1468f4d31934c08b56637f557bdad5ffc6639482",
        "title": "C and C + + : a Case for Compatibility", "abstract": "This article
        presents a case for significantly increasing the degree of compatibility between
        C and C++. The ideal proposed is full compatibility. This ideal is not trivially
        obvious nor technically easy to achieve. Therefore, arguments against full
        compatibility are presented as well as arguments for. A companion paper [Stroustrup,2002a]
        provides a \u2018\u2018philosophical\u2019\u2019 view of the C/C++ relationship,
        and a follow-up article will present some examples of how incompatibilities
        might be resolved [Stroustrup,2002c]. 1 Languages and Communities Modern C
        [C89] [C99] and C++ [C++98] are sibling languages [Stroustrup,2002] [Stroustrup,2002a]
        descended from Classic C [Kernighan,1978]. In many people\u2019s minds they
        are (wrongly, but understandably) fused into the mythical C/C++ programming
        language. There is no C/C++ language, but there is a C/C++ community. The
        primary aim of this article is to examine how the future evolution of C and
        C++ can best serve that community. My claim is that a significant increase
        in the degree of C/C++ compatibility best serves the interests of the C/C++
        community and that the ideal is full C/C++ compatibility. What is the C/C++
        community? Millions of programmers use C and/or C++ so any individual and
        any organization necessarily has an incomplete picture of the situation and
        often a biased one. Consider for a moment three groups: [1] programmers who
        use C only [2] programmers who use C++ only [3] programmers who use both C
        and C++ Within each group, we can again look at a multitude of classifications.
        For example, students, teachers, occasional programmers, games programmers,
        builders of large systems, embedded systems programmers, scientific/numeric
        programmers, builders of small commercial applications, programmers with a
        great need for portability, builders of applications embedded in large commercial
        frameworks, software tool builders, programmers of large infrastructure applications,
        etc. It is hard to place an individual in a single category. Importantly,
        many programmers belong to several of these groups and subgroups during a
        career, even if they are currently comfortable in some single category. Are
        there people who use C++ and never C? Of course there are many C++ programmers
        who never compiled a C source file, but how many C++ programs don\u2019t call
        a C library? If a C library is used directly, the programmer must understand
        the constructs appearing in its header files. Even if C code is used only
        indirectly, some aspects of C must often be taken into account, such as C\u2019s
        use of m a l l o c () rather than n e w , the use of arrays rather than C++
        standard library containers, and the absence of exception handling. The use
        a C in one part of a program often affects other parts of the program, so
        that a C++ programmer must be aware of C. And of course, the C++ standard
        library includes the C89 standard library. It is only a slight exaggeration
        to say that all C++ programmers are C programmers. On the other hand, there
        are C programmers who never use C++. This is obviously true for programmers
        who \u2013 especially in the embedded systems community \u2013 work on a platform
        for which no C++ compiler exist. There are fewer such platforms than there
        used to be, though, and not all of those support ISO Part of a three-article
        series from \"The C/C++ Users Journal\" July, August, and September 2002",
        "venue": "", "year": 2002, "referenceCount": 8, "citationCount": 3, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "s2-fos-model"}], "publicationTypes":
        null, "publicationDate": null, "journal": null, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "496dab7fc6ca12fafa139e455b75ab0fcaa60a1d",
        "externalIds": {"MAG": "110333075", "CorpusId": 59747699}, "corpusId": 59747699,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/496dab7fc6ca12fafa139e455b75ab0fcaa60a1d",
        "title": "C and C++: Siblings", "abstract": "This article presents a view
        of the relationship between K&R C\u2019s most prominent descendants: ISO C
        and ISO C++. It briefly discusses some implications of these incompatibilities,
        reflects on the \u2018\u2018Spirit of C\u2019\u2019 notion, and gives examples
        of how incompatibilities can be handled. This article is the first of three,
        providing a \u2018\u2018philosophical\u2019\u2019 view of the C/C ++ relationship.
        The second article will present arguments to the effect that a merger of C
        and C ++ is the best direction for the C/C++ community [Stroustrup,2002b],
        and the third article will present some examples of how language incompatibilities
        might be reconciled [Stroustrup,2002c].", "venue": "", "year": 2002, "referenceCount":
        21, "citationCount": 8, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Philosophy",
        "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate": null,
        "journal": {"volume": "", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "872263322c374319c7306a22fa5e1f2bcbf7949c",
        "externalIds": {"CorpusId": 10798371}, "corpusId": 10798371, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/872263322c374319c7306a22fa5e1f2bcbf7949c",
        "title": "Sibling Rivalry: C and C++", "abstract": "This article presents
        a view of the relationship between K&R C\u2019s most prominent descendants:
        ISO C and ISO C++. It gives a rough chronology of the exchanges of features
        between the various versions of C and C++ and presents some technical details
        related to their most significant current incompatibilities. My focus here
        is the areas where C and C++ differ slightly (\u2018\u2018the incompatibilities\u2019\u2019),
        rather than the large area of commonality or the areas where one language
        provide facilities not offered by the other. In addition to presenting incompatibilities,
        this paper briefly discusses some implications of these incompatibilities,
        reflects on the \u2018\u2018Spirit of C\u2019\u2019 and \u2018\u2018Spirit
        of C++\u2019\u2019 notions, and states some opinions about the relationship
        between C and C++. This article is written in support of the view that C/C++
        incompatibilities can and should be eliminated.", "venue": "", "year": 2002,
        "referenceCount": 19, "citationCount": 2, "influentialCitationCount": 0, "isOpenAccess":
        false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy": [{"category":
        "Economics", "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate":
        null, "journal": null, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "8793484686efe697023106434eccc732151d0563", "externalIds": {"CorpusId":
        14271997}, "corpusId": 14271997, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/8793484686efe697023106434eccc732151d0563",
        "title": "C and C + + : Case Studies in Compatibility", "abstract": "This
        article gives examples of how one might go about increasing the degree of
        compatibility of C and C++. The ideal is full compatibility. Topics covered
        includes, variadic functions, v o i d *, b o o l , f (v o i d ), c o n s t
        , i n l i n e , and variable length arrays. These topics allows a demonstration
        of concerns that must be taken into account when trying to increase C/C++
        compatibility. A companion paper [Stroustrup,2002a] provides a \u2018\u2018philosophical\u2019\u2019
        view of the C/C++ relationship, and another companion paper presents a case
        for significantly increased C/C++ compatibility and proposed full compatibility
        as the ideal. [Stroustrup,2002b].", "venue": "", "year": 2002, "referenceCount":
        8, "citationCount": 4, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy": [{"category":
        "Philosophy", "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate":
        null, "journal": null, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "fa0e922f7aff9a5d14bc1a6005092f6224fbbb4e", "externalIds": {"MAG":
        "64580130", "CorpusId": 59692906}, "corpusId": 59692906, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/fa0e922f7aff9a5d14bc1a6005092f6224fbbb4e",
        "title": "C++ Programming Styles and Libraries", "abstract": "One of the main
        aims of C++ has been to make it an excellent tool for writing libraries. Here,
        I present some points about the role of libraries and of the programming styles
        that they support and rely on. For lack of space for a thorough treatment
        of these themes, I refer to books.", "venue": "", "year": 2002, "referenceCount":
        19, "citationCount": 1, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Education",
        "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate": null,
        "journal": {"volume": "", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "5b7e2b8fd75fabaae99d554a5f99a729399be4b1",
        "externalIds": {"MAG": "103235239", "CorpusId": 59739911}, "corpusId": 59739911,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/5b7e2b8fd75fabaae99d554a5f99a729399be4b1",
        "title": "Wrapping C++ Member Function Calls", "abstract": "This paper presents
        a simple, general, and efficient solution to the old problem of \u2018\u2018wrapping\u2019\u2019
        calls to an object in pairs of prefix and suffix code. The solution is also
        non-intrusive, applies to existing classes, allows the use of several prefix/suffix
        pairs, and can be implemented in 15 simple lines of Standard C++. A robust
        version of the wrapper is also presented. The claim of efficiency is backed
        by measurement. The paper is organized around a series of examples evolving
        the basic idea into a final robust template class.", "venue": "", "year":
        2000, "referenceCount": 9, "citationCount": 4, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": null, "journal": {"volume": "",
        "name": ""}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "661c59295685125df80f6afca5ec0486b55d665e", "externalIds": {"MAG":
        "2124009297", "CorpusId": 61525921}, "corpusId": 61525921, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/661c59295685125df80f6afca5ec0486b55d665e",
        "title": "The C++ Programming Language: Special Edition", "abstract": "Noise
        detection apparatus included in a peripheral controller operates to detect
        automatically when a noise record has been stored in the controller buffer
        storage unit. The detection apparatus includes control apparatus associated
        with the buffer storage unit which keeps track of the number of storage locations
        into which data characters have been stored during a transfer operation. Also
        included are means for selectively establishing one or more counts corresponding
        to a minimum number of data characters which must be stored in the buffer
        storage unit before the controller starts to transfer any data characters
        to a data processing unit. Each time a minimum number of characters has not
        been previously stored in the buffer unit when the controller receives a signal
        indicating the completion of the transfer, the controller clears the buffer
        storage unit of data characters and continues the transfer.", "venue": "",
        "year": 2000, "referenceCount": 0, "citationCount": 400, "influentialCitationCount":
        46, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": "2000-02-11", "journal": {"volume":
        "", "name": ""}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "d43340c4b07b7f15b81ebae919a9daa86fa800d5", "externalIds": {"MAG":
        "2246102742", "DBLP": "conf/ecoopwException/Stroustrup00", "DOI": "10.1007/3-540-45407-1_4",
        "CorpusId": 5647018}, "corpusId": 5647018, "publicationVenue": null, "url":
        "https://www.semanticscholar.org/paper/d43340c4b07b7f15b81ebae919a9daa86fa800d5",
        "title": "Exception Safety: Concepts and Techniques", "abstract": null, "venue":
        "Advances in Exception Handling Techniques", "year": 2000, "referenceCount":
        4, "citationCount": 23, "influentialCitationCount": 1, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"],
        "publicationDate": null, "journal": {"pages": "60-76"}, "authors": [{"authorId":
        "1706320", "name": "B. Stroustrup"}]}, {"paperId": "4cceee85ce11c298ec04d2da0e91ea955329bc78",
        "externalIds": {"MAG": "1589386397", "CorpusId": 7394376}, "corpusId": 7394376,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/4cceee85ce11c298ec04d2da0e91ea955329bc78",
        "title": "Learning standard C++ as a new language", "abstract": "To get the
        most out of Standard C++ [C++,1998], we must rethink the way we write C++
        programs. An approach to such a \"rethink\" is to consider how C++ can be
        learned (and taught). What design and programming techniques do we want to
        emphasize? What subsets of the language do we want to learn first? What subsets
        of the language do we want to emphasize in real code? This paper compares
        a few examples of simple C++ programs written in a modern style using the
        standard library to traditional C-style solutions. It argues briefly that
        lessons from these simple examples are relevant to large programs. More generally,
        it argues for a use of C++ as a higher-level language that relies on abstraction
        to provide elegance without loss of efficiency compared to lower-level styles.
        We want our programs to be easy to write, correct, maintainable, and acceptably
        efficient. It follows that we ought to use C++ \u2010 and any other programming
        language \u2010 in ways that most closely approximate this ideal. It is my
        conjecture that C++ community has yet to internalize the facilities offered
        by Standard C ++ so that major improvements relative to the ideal can be obtained
        from reconsidering our style of C ++ use. This paper focuses on the styles
        of programming that the facilities offered by Standard C ++ support \u2010
        not the facilities themselves. The key to major improvements is a reduction
        of the size and complexity of the code we write through the use of libraries.
        Below, I demonstrate and quantify these reductions for a couple of simple
        examples such as might be part of a introductory C++ course. By reducing size
        and complexity, we reduce development time, ease maintenance, and decrease
        the cost of testing. Importantly, we also simplify the task of learning C
        ++. For toy programs and for students who program only to get a good grade
        in a nonessential course, this simplification would be sufficient. However,
        for professional programmers efficiency is a major issue. Only if efficiency
        isn\u2019t sacrificed can we expect our programming styles to scale to be
        usable in systems dealing with the data volumes and real-time requirements
        regularly encountered by modern services and businesses. Consequently, I present
        measurements that demonstrate that the reduction in complexity can be obtained
        without loss of efficiency. Finally, I discuss the implications of this view
        on approaches to learning and teaching C ++", "venue": "", "year": 1999, "referenceCount":
        6, "citationCount": 26, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate":
        "1999-05-01", "journal": {"volume": "17", "pages": "43-54", "name": "The C
        Users Journal archive"}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "eb331db6ec60d64b9e0d90978ee7398d9e2f0605", "externalIds": {"MAG":
        "186299878", "DOI": "10.1201/9781420049114.sec3", "CorpusId": 59984835}, "corpusId":
        59984835, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/eb331db6ec60d64b9e0d90978ee7398d9e2f0605",
        "title": "An Overview of the C++ Programming Language", "abstract": "This
        overview of C++ presents the key design, programming, and language-technical
        concepts using examples to give the reader a feel for the language. C ++ is
        a general-purpose programming language with a bias towards systems programming
        that supports efficient low-level computation, data abstraction, object-oriented
        programming, and generic programming.", "venue": "", "year": 1999, "referenceCount":
        32, "citationCount": 26, "influentialCitationCount": 3, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["Review"], "publicationDate":
        null, "journal": {"volume": "", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "10364be0ec22f93a064e71bcb3fb85cc92efeb28",
        "externalIds": {"MAG": "2182516444", "CorpusId": 123667400}, "corpusId": 123667400,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/10364be0ec22f93a064e71bcb3fb85cc92efeb28",
        "title": "Analytic Tests for Relative Stability and Strict Aperiodicity",
        "abstract": "In this paper, simple numerical procedures are proposed, which
        use the Routh test to determine the relative stability and strict aperiodicity
        of linear time-invariant systems.", "venue": "", "year": 1998, "referenceCount":
        4, "citationCount": 0, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Mathematics"], "s2FieldsOfStudy":
        [{"category": "Mathematics", "source": "external"}, {"category": "Mathematics",
        "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate": null,
        "journal": {"volume": "", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "424f1905989ff2d3549640df3a439b7e2106704e",
        "externalIds": {"CorpusId": 15833414}, "corpusId": 15833414, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/424f1905989ff2d3549640df3a439b7e2106704e",
        "title": "Generalizing Overloading for C + + 2000", "abstract": "This paper
        outlines the proposal for generalizing the overloading rules for Standard
        C++ that is expected to become part of the next revision of the standard.
        The focus is on general ideas rather than technical details (which can be
        found in AT&T Labs Technical Report no. 42, April 1,1998).", "venue": "",
        "year": 1998, "referenceCount": 0, "citationCount": 4, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [{"category": "Physics", "source": "s2-fos-model"}], "publicationTypes": null,
        "publicationDate": null, "journal": null, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "9717316c4089f6220cb28ee9f2b7d46961bc6e6f",
        "externalIds": {"DBLP": "journals/computer/HamiltonS98", "MAG": "2057731717",
        "DOI": "10.1109/MC.1998.683014", "CorpusId": 20329264}, "corpusId": 20329264,
        "publicationVenue": {"id": "f6572f66-2623-4a5e-b0d9-4a5028dea98f", "name":
        "Computer", "type": "journal", "alternate_names": ["IEEE Computer", "IEEE
        Comput"], "issn": "0018-9162", "url": "http://www.computer.org/computer",
        "alternate_urls": ["https://ieeexplore.ieee.org/servlet/opac?punumber=2",
        "http://www.computer.org/portal/site/ieeecs/index.jsp", "https://ieeexplore.ieee.org/xpl/RecentIssue.jsp?punumber=2"]},
        "url": "https://www.semanticscholar.org/paper/9717316c4089f6220cb28ee9f2b7d46961bc6e6f",
        "title": "The Real Stroustrup Interview", "abstract": "argued that \" a programming
        language is really a very tiny part of the world, and as such, it ought not
        be taken too seriously. Keep a sense of proportion and most importantly keep
        a sense of humor. Among major programming languages, C++ is the richest source
        of puns and jokes. That is no accident. \" For the past few months, a hoax
        interview between Stroustrup and Computer has been making the rounds in cyberspace.
        While we regret the incident , it offers us a welcome opportunity to have
        the father of C++ share his insights on Standard C++ and software development
        in general. We can also attest to his continued sense of proportion and humor\u2014he
        suggests that the fictitious interview would have been a much funnier parody
        had he written it himself. STANDARD C++ Computer: ISO approved the Standard
        C++ in November 1997, and you published a third edition of your The C++ Programming
        Language (Addison Wes-ley, 1997). How has C++ evolved over the past few years
        and what does the ISO standard mean for the C++ community? Stroustrup: It
        is great to finally have a complete, detailed, and stable definition of C++.
        This will be a great help to the C++ community in myriad direct and not-so-direct
        ways. Obviously, we will get better implementations as compiler providers
        start shifting attention from catching up with the standards committee to
        quality-of-implementation issues. This is already happening. Standards-conforming
        implementations will prove a boon to tools and library suppliers by providing
        a larger common platform to build for. The standard gives the programmer an
        opportunity to be more adventurous with new techniques. Programming styles
        that used to be unrealistic in production code are becoming realistic propositions.
        Thus, more flexible, general , faster, and more maintainable code can be written.
        Naturally, we should keep cool and not indulge in orgies of \" advanced \"
        techniques. There are still no miracles, and the best code is still the code
        that most directly matches a sound design. However , now is the time to experiment
        and see which techniques will suit particular people, organizations, and projects.
        Much of The C++ Programming Language is devoted to these techniques and the
        trade-offs they represent. The most visible aspects of what makes this progress
        feasible are the \" new \" major language facilities\u2014tem-plates, exceptions,
        runtime type information , and namespaces\u2014and the new standard library.
        The minor improvements to \u2026", "venue": "Computer", "year": 1998, "referenceCount":
        0, "citationCount": 10, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"],
        "publicationDate": "1998-06-01", "journal": {"volume": "31", "pages": "110-114",
        "name": "Computer"}, "authors": [{"authorId": "113400769", "name": "S. Hamilton"},
        {"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId": "29f92dbc9e1ade36c921b88a492554acdd6751b0",
        "externalIds": {"MAG": "78908886", "DBLP": "books/daglib/0089932", "CorpusId":
        5127915}, "corpusId": 5127915, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/29f92dbc9e1ade36c921b88a492554acdd6751b0",
        "title": "The C++ programming language (3. ed.)", "abstract": null, "venue":
        "", "year": 1997, "referenceCount": 0, "citationCount": 258, "influentialCitationCount":
        36, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": null, "journal": {"pages": "I-X,
        1-910"}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId":
        "905b9da5fc7d090e8b96814507d84c4167b4f29c", "externalIds": {"MAG": "2760446659",
        "CorpusId": 195959002}, "corpusId": 195959002, "publicationVenue": null, "url":
        "https://www.semanticscholar.org/paper/905b9da5fc7d090e8b96814507d84c4167b4f29c",
        "title": "C++ : programovac\u00ed jazyk : The C++ programming language (Orig.)",
        "abstract": null, "venue": "", "year": 1997, "referenceCount": 0, "citationCount":
        132, "influentialCitationCount": 25, "isOpenAccess": false, "openAccessPdf":
        null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category":
        "Computer Science", "source": "external"}, {"category": "Computer Science",
        "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate": null,
        "journal": {"volume": "", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "0ea96714ac76cfbb500ffb1de4db038744dabc47",
        "externalIds": {"MAG": "2986935236", "DOI": "10.1145/234286.1057836", "CorpusId":
        209075655}, "corpusId": 209075655, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/0ea96714ac76cfbb500ffb1de4db038744dabc47",
        "title": "A history of C++: 1979--1991", "abstract": "This paper outlines
        the history of the C++ programming language. The emphasis is on the ideas,
        constraints, and people that shaped the language, rather than the minutiae
        of language features. Key design decisions relating to language features are
        discussed, but the focus is one the overall design goals and practical constraints.
        The evolution of C++ is traced from C with Classes to the current ANSI and
        ISO standards work and the explosion of use, interest, commercial activity,
        compilers, tools, environments, and libraries.", "venue": "", "year": 1996,
        "referenceCount": 36, "citationCount": 7, "influentialCitationCount": 0, "isOpenAccess":
        false, "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate":
        null, "journal": {"volume": "", "pages": "699-769", "name": ""}, "authors":
        [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId": "3ec9d13d788118152063927b6a3f161be232e10a",
        "externalIds": {"MAG": "151387838", "CorpusId": 59910705}, "corpusId": 59910705,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/3ec9d13d788118152063927b6a3f161be232e10a",
        "title": "Making a vector fit for a standard", "abstract": null, "venue":
        "", "year": 1996, "referenceCount": 0, "citationCount": 3, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}], "publicationTypes": null, "publicationDate": "1996-05-01", "journal":
        {"volume": "", "pages": "563-577", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "80f17151348d458fef29b2b2a54c90381caeba1d",
        "externalIds": {"MAG": "2006936740", "DBLP": "conf/icsr/Stroustrup96", "DOI":
        "10.1109/ICSR.1996.496109", "CorpusId": 34010027}, "corpusId": 34010027, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/80f17151348d458fef29b2b2a54c90381caeba1d",
        "title": "Language-technical aspects of reuse", "abstract": "Reuse happens
        only when a variety of social conditions are favorable. However, social conditions,
        development processes, and design methods alone cannot guarantee success.
        In the end, working code must be produced, and at this stage programming languages
        and programming styles can make a critical difference. The paper focuses on
        C++ and its use because that''s where the author''s experience is, and because
        reuse in the abstract is a sterile exercise. To yield its obvious benefits,
        reuse must be practised. Reuse is a result of good design; it is not something
        you get from simple minded use of special language features. The paper presents
        examples of how designs of components for use in several contexts can be expressed
        directly and efficiently in C++. Concrete types, abstract classes, class hierarchies,
        and generic programming using templates are mentioned.", "venue": "Proceedings
        of Fourth IEEE International Conference on Software Reuse", "year": 1996,
        "referenceCount": 3, "citationCount": 15, "influentialCitationCount": 1, "isOpenAccess":
        false, "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle",
        "Conference"], "publicationDate": "1996-04-23", "journal": {"pages": "11-19",
        "name": "Proceedings of Fourth IEEE International Conference on Software Reuse"},
        "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId":
        "8bf93a5cbdc8d214f71733828496067114ac3773", "externalIds": {"MAG": "9491379",
        "CorpusId": 14532466}, "corpusId": 14532466, "publicationVenue": null, "url":
        "https://www.semanticscholar.org/paper/8bf93a5cbdc8d214f71733828496067114ac3773",
        "title": "A Brief Look at C", "abstract": "This note describes some key aspects
        of what C++ is and of how C++ has developed over the years. The perspective
        is that of an experienced C++ user looking at C++ as a practical tool. No
        attempts are made to compare C++ to other languages, though I have tried to
        answer some questions that I have often heard asked by Lisp programmers.",
        "venue": "", "year": 1996, "referenceCount": 7, "citationCount": 3, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Philosophy"],
        "s2FieldsOfStudy": [{"category": "Philosophy", "source": "external"}, {"category":
        "Education", "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate":
        null, "journal": {"volume": "", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "8ff7802cd9f7e89887f1dfae9c251307794c617d",
        "externalIds": {"CorpusId": 12105021}, "corpusId": 12105021, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/8ff7802cd9f7e89887f1dfae9c251307794c617d",
        "title": "Proposal to Acknowledge That Garbage Collection for C++ Is Possible
        X3j16/96-0114 Wg21/n0932", "abstract": "The ARM, \"The C++ Programming Language
        (2nd edition)\", and \"The Design and Evolution of C++\" all mention that
        automatic garbage collection of C++ is possible, but that an implementation
        is not required to provide a garbage collector. This is a proposal to make
        this explicit in the standard and to specify a couple of details of what it
        means to collect garbage. The proposal is for clarification rather than significant
        normative changes.", "venue": "", "year": 1996, "referenceCount": 0, "citationCount":
        1, "influentialCitationCount": 0, "isOpenAccess": false, "openAccessPdf":
        null, "fieldsOfStudy": null, "s2FieldsOfStudy": [{"category": "Computer Science",
        "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate": null,
        "journal": null, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "90d9b93cebd4517c4fc60dc260a0a7c107646c7c", "externalIds": {"MAG":
        "2913494815", "CorpusId": 56797773}, "corpusId": 56797773, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/90d9b93cebd4517c4fc60dc260a0a7c107646c7c",
        "title": "Standardizing C", "abstract": null, "venue": "", "year": 1996, "referenceCount":
        0, "citationCount": 2, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Engineering"], "s2FieldsOfStudy":
        [{"category": "Engineering", "source": "external"}, {"category": "History",
        "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate": "1996-05-01",
        "journal": {"volume": "", "pages": "3-6", "name": ""}, "authors": [{"authorId":
        "1706320", "name": "B. Stroustrup"}]}, {"paperId": "9344b3e607566e8e11ef7bb2a37aa6af4d82b849",
        "externalIds": {"MAG": "1513934424", "CorpusId": 60746259}, "corpusId": 60746259,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/9344b3e607566e8e11ef7bb2a37aa6af4d82b849",
        "title": "A perspective on ISO C", "abstract": "This paper offers a personal
        view of C++ as it stands after the release of the first public draft of the
        ANSI/ISO C++ standard. It reviews the aims of the language and discuss how
        the standards process has helped achieve them. The language as it is currently
        defined is illustrated through two example: one focussing on language features
        and one focussing on the standard library.", "venue": "", "year": 1996, "referenceCount":
        15, "citationCount": 3, "influentialCitationCount": 1, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["Review"], "publicationDate":
        "1996-05-01", "journal": {"volume": "", "pages": "581-593", "name": ""}, "authors":
        [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId": "bce8510c9abb787ba0d7f1f8ec009318604aea54",
        "externalIds": {"MAG": "1596053459", "CorpusId": 109754418}, "corpusId": 109754418,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/bce8510c9abb787ba0d7f1f8ec009318604aea54",
        "title": "Library design using C", "abstract": null, "venue": "", "year":
        1996, "referenceCount": 0, "citationCount": 2, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Engineering"],
        "s2FieldsOfStudy": [{"category": "Engineering", "source": "external"}], "publicationTypes":
        null, "publicationDate": "1996-05-01", "journal": {"volume": "", "pages":
        "15-32", "name": ""}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "1251daa3bb5eaab0316bef252f2bf007e370c573", "externalIds": {"DBLP":
        "books/daglib/0076736", "CorpusId": 263867456}, "corpusId": 263867456, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/1251daa3bb5eaab0316bef252f2bf007e370c573",
        "title": "The design and evolution of C++", "abstract": null, "venue": "",
        "year": 1995, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}], "publicationTypes": null, "publicationDate": null, "journal":
        {"pages": "I-X, 1-461"}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "6df7bdb60f18b033930a69f934174d28e42de301", "externalIds": {"DBLP":
        "journals/spe/KoenigS95", "MAG": "2109248307", "DOI": "10.1002/SPE.4380251304",
        "CorpusId": 26604591}, "corpusId": 26604591, "publicationVenue": {"id": "3da56ce6-4a70-402c-a8b0-7dd39a3273d3",
        "name": "Software, Practice & Experience", "type": "journal", "alternate_names":
        ["Softw  Pract Exp", "Softw Pract  Exp", "Software - Practice and Experience"],
        "issn": "0038-0644", "url": "http://www3.interscience.wiley.com/cgi-bin/jhome/1752",
        "alternate_urls": ["http://www.interscience.wiley.com/jpages/0038-0644/",
        "https://onlinelibrary.wiley.com/journal/1097024X"]}, "url": "https://www.semanticscholar.org/paper/6df7bdb60f18b033930a69f934174d28e42de301",
        "title": "Foundations for native C++ styles", "abstract": "Over the past decade,
        C++ has become the most commonly used language for introducing object\u2010oriented
        programming and other abstraction techniques into production software. During
        this period, C++ has evolved to meet the challenges of production systems.
        In this, C++ differs radically from languages that come primarily from academic
        or research environments, and from less widely used languages. Although C++
        has also been extensively used in academia and for research, its evolution
        was driven primarily by feedback from its use in industrial applications.",
        "venue": "Software, Practice & Experience", "year": 1995, "referenceCount":
        9, "citationCount": 9, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"],
        "publicationDate": "1995-12-01", "journal": {"volume": "25", "name": "Software:
        Practice and Experience"}, "authors": [{"authorId": "2080148697", "name":
        "Andrew Koenig"}, {"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId":
        "fd8464521c5b6471ec9db25068a6513a6760c46a", "externalIds": {"MAG": "1989649391",
        "DBLP": "journals/oopsm/Stroustrup95", "DOI": "10.1145/260094.260207", "CorpusId":
        31511739}, "corpusId": 31511739, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/fd8464521c5b6471ec9db25068a6513a6760c46a",
        "title": "Why C++ is not just an object-oriented programming language", "abstract":
        "C++ directly supports a variety of programming styles. In this, C ++ deliberately
        differs from languages designed to support a single way of writing programs.
        This paper briefly presents key programming styles directly supported by C++
        and argues that the support for multiple styles is one of its major strengths.
        The styles presented include: traditional C-style, concrete classes, abstract
        classes, traditional class hierarchies, abstract classes and class hierarchies,
        and generic programming. To provide a context for this overview, I discuss
        criteria for a reasonable and useful definition of \u2018\u2018object-oriented
        programming.\u2019\u2019", "venue": "OOPSLA Addendum", "year": 1995, "referenceCount":
        11, "citationCount": 28, "influentialCitationCount": 2, "isOpenAccess": true,
        "openAccessPdf": {"url": "https://dl.acm.org/doi/pdf/10.1145/260111.260207",
        "status": null}, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}], "publicationTypes":
        ["Book", "JournalArticle", "Review"], "publicationDate": "1995-10-01", "journal":
        {"name": "Addendum to the proceedings of the 10th annual conference on Object-oriented
        programming systems, languages, and applications"}, "authors": [{"authorId":
        "1706320", "name": "B. Stroustrup"}]}, {"paperId": "11639f4e479b630e66fa27564590cfaca9f45445",
        "externalIds": {"MAG": "205423678", "CorpusId": 59994844}, "corpusId": 59994844,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/11639f4e479b630e66fa27564590cfaca9f45445",
        "title": "The design of C", "abstract": null, "venue": "", "year": 1994, "referenceCount":
        0, "citationCount": 9, "influentialCitationCount": 2, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}], "publicationTypes":
        null, "publicationDate": null, "journal": {"volume": "", "name": ""}, "authors":
        [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId": "617845029af8e8adba855ca7261cb1ff0f1ef40e",
        "externalIds": {"MAG": "2117174233", "CorpusId": 32300607}, "corpusId": 32300607,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/617845029af8e8adba855ca7261cb1ff0f1ef40e",
        "title": "The Design and Evolution of C", "abstract": "PART I. 1. The Prehistory
        of C++ . 2. C with Classes. 3. The Birth of C++. 4. C++ Language Design Rules.
        5. Chronology 1985-1993. 6. Standardization. 7. Interest and Use. 8. Libraries.
        9. Looking Ahead. PART II. 1. Memory Management. 2. Overloading. 3. Multiple
        Inheritance. 4. Class Concept Refinements. 5. Casting. 6. Templates. 7. Exception
        Handling. 8. Namespaces. 9. The C Preprocessor. Index. 0201543303T04062001",
        "venue": "", "year": 1994, "referenceCount": 0, "citationCount": 628, "influentialCitationCount":
        42, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": null, "journal": {"volume": "",
        "name": ""}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "14d1f59cbd20a813f4f6145844a9ebab2c6c3c98", "externalIds": {"DBLP":
        "conf/hopl/Stroustrup93", "DOI": "10.1145/155360.155375", "CorpusId": 235780383},
        "corpusId": 235780383, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/14d1f59cbd20a813f4f6145844a9ebab2c6c3c98",
        "title": "A History of C++: 1979-1991", "abstract": null, "venue": "HOPL Preprints",
        "year": 1993, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": true, "openAccessPdf": {"url": "https://dl.acm.org/doi/pdf/10.1145/155360.155375",
        "status": null}, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "History",
        "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"], "publicationDate":
        null, "journal": {"pages": "271-297"}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "37898643665993ab75c50e6e06c2cebe6626aa68",
        "externalIds": {"MAG": "2469320783", "DBLP": "conf/c++/Stroustrup87b", "CorpusId":
        38109731}, "corpusId": 38109731, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/37898643665993ab75c50e6e06c2cebe6626aa68",
        "title": "Possible Directions for C++", "abstract": null, "venue": "C++ Workshop",
        "year": 1993, "referenceCount": 0, "citationCount": 25, "influentialCitationCount":
        1, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}], "publicationTypes": ["JournalArticle"], "publicationDate": "1993-09-07",
        "journal": {"pages": "399-416"}, "authors": [{"authorId": "1706320", "name":
        "B. Stroustrup"}]}, {"paperId": "9e6edd54b7b46bc13cb38718ebbd1de01175f690",
        "externalIds": {"MAG": "2408012594", "DBLP": "journals/csys/Stroustrup89a",
        "CorpusId": 43152057}, "corpusId": 43152057, "publicationVenue": {"id": "bf54d856-48c2-4e7f-8886-af11bcc10676",
        "name": "Computing Systems", "type": "journal", "alternate_names": ["Comput
        Syst"], "issn": "0895-6340"}, "url": "https://www.semanticscholar.org/paper/9e6edd54b7b46bc13cb38718ebbd1de01175f690",
        "title": "The Evolution of C++: 1985 to 1989", "abstract": "The Ct+ Programming
        Language [Stroustrup 1986] describes Cr+ as defrned and implemented in August
        1985. This paper describes the growth of the language since then and clarifies
        a few points in the defrnition. It is emphasized that these language modifications
        are extensions; Cr+ has been and will remain a stable language suitable for
        long term software development. The main new featurei of Cr-+ are: multiple
        inheritance, type-safe linkage, better resolution of overloaded functions,
        recuriive definition of assignment and initialization, better facilities for
        user-defrned memory management, abstract classes, static member functions,
        const member functions, protected members, overloading of operator ->, and
        pointers to members. These features are provided in the 2.0 release of Cr+.
        This paper is a revised and expanded version of a paper with a similar title.
        prer.ii\u00f0\u00bf \"t the USENIX C++ Workshop in Sanla Fe, New Mexico, November
        1987. @ Computing Systems,Vol. 2''No. 3''Summer 1989 191", "venue": "Computing
        Systems", "year": 1993, "referenceCount": 14, "citationCount": 37, "influentialCitationCount":
        3, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle"], "publicationDate": "1993-09-07", "journal":
        {"volume": "2", "pages": "191-250", "name": "Comput. Syst."}, "authors": [{"authorId":
        "1706320", "name": "B. Stroustrup"}]}, {"paperId": "e94286ad503414eb85fecd8164264ee2a0b7927e",
        "externalIds": {"MAG": "2142916157", "DOI": "10.1145/154766.155375", "CorpusId":
        2196635}, "corpusId": 2196635, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/e94286ad503414eb85fecd8164264ee2a0b7927e",
        "title": "A history of C++: 1979\u20131991", "abstract": "This paper outlines
        the history of the C++ programming language. The emphasis is on the ideas,
        constraints, and people that shaped the language, rather than the minuitiae
        of language features. Key design decisions relating to language features are
        discussed, but the focus is on the overall design goals and practical constraints.
        The evolution of C++ is traced from C with Classes to the current ANSI and
        ISO standards work and the explosion of use, interest, commercial activity,
        compilers, tools, environments, and libraries.", "venue": "HOPL-II", "year":
        1993, "referenceCount": 69, "citationCount": 68, "influentialCitationCount":
        4, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": "1993-03-01", "journal": {"volume":
        "28", "pages": "271-297", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "a0e0a184e21c9252500aebf2c4f002b0c69a0e75",
        "externalIds": {"MAG": "95352280", "DBLP": "conf/c++/StroustrupL92", "CorpusId":
        36039647}, "corpusId": 36039647, "publicationVenue": {"id": "fe8d6f25-5bff-4eb4-b243-424b8b18f278",
        "name": "C++ Conference", "type": "conference", "alternate_names": ["C++",
        "C++ Conf"]}, "url": "https://www.semanticscholar.org/paper/a0e0a184e21c9252500aebf2c4f002b0c69a0e75",
        "title": "Run Time Type Identification for C++", "abstract": null, "venue":
        "C++ Conference", "year": 1992, "referenceCount": 0, "citationCount": 23,
        "influentialCitationCount": 1, "isOpenAccess": false, "openAccessPdf": null,
        "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category": "Computer
        Science", "source": "external"}], "publicationTypes": ["JournalArticle", "Conference"],
        "publicationDate": null, "journal": {"pages": "313-340"}, "authors": [{"authorId":
        "1706320", "name": "B. Stroustrup"}, {"authorId": "47877522", "name": "Dmitry
        Lenkov"}]}, {"paperId": "7ef33dadf79f475db560be5d5ae62042b0d29fe1", "externalIds":
        {"MAG": "2147557419", "DBLP": "books/aw/Stroustrup91", "CorpusId": 46073766},
        "corpusId": 46073766, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/7ef33dadf79f475db560be5d5ae62042b0d29fe1",
        "title": "The C++ Programming Language, Second Edition", "abstract": null,
        "venue": "", "year": 1991, "referenceCount": 0, "citationCount": 259, "influentialCitationCount":
        17, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": null, "journal": {"volume": "",
        "name": ""}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "8ba2e16569ca174d07aff48c24bc2f567016592b", "externalIds": {"MAG":
        "10589072", "CorpusId": 59759037}, "corpusId": 59759037, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/8ba2e16569ca174d07aff48c24bc2f567016592b",
        "title": "The C++ programming language (2nd ed.)", "abstract": null, "venue":
        "", "year": 1991, "referenceCount": 0, "citationCount": 1196, "influentialCitationCount":
        53, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": "1991-08-01", "journal": {"volume":
        "", "name": ""}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "f2038b61b571111877d267c52000b4762dd42f9a", "externalIds": {"MAG":
        "1578628194", "CorpusId": 15726064}, "corpusId": 15726064, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/f2038b61b571111877d267c52000b4762dd42f9a",
        "title": "What is ''''Object-Oriented Programming''''? (1991 revised version)",
        "abstract": "\u2018\u2018Object-Oriented Programming\u2019\u2019 and \u2018\u2018Data
        Abstraction\u2019\u2019 have become very common terms. Unfortunately, few
        people agree on what they mean. I will offer informal definitions that appear
        to make sense in the context of languages like Ada, C + +, Modula2, Simula,
        and Smalltalk. The general idea is to equate \u2018\u2018support for data
        abstraction\u2019\u2019 with the ability to define and use new types and equate
        \u2018\u2018support for object-oriented programming\u2019\u2019 with the ability
        to express type hierarchies. Features necessary to support these programming
        styles in a general purpose programming language will be discussed. The presentation
        centers around C + + but is not limited to facilities provided by that language.",
        "venue": "", "year": 1991, "referenceCount": 32, "citationCount": 22, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": null, "journal": {"volume": "",
        "name": ""}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "1955673684ccef4551543c9d6c819bbb7347df32", "externalIds": {"MAG":
        "1581217569", "DBLP": "conf/c++/KoenigS90", "DOI": "10.1017/9781316534489.018",
        "CorpusId": 11651752}, "corpusId": 11651752, "publicationVenue": {"id": "fe8d6f25-5bff-4eb4-b243-424b8b18f278",
        "name": "C++ Conference", "type": "conference", "alternate_names": ["C++",
        "C++ Conf"]}, "url": "https://www.semanticscholar.org/paper/1955673684ccef4551543c9d6c819bbb7347df32",
        "title": "Exception Handling for C++", "abstract": "This paper outlines a
        design for an exception handling mechanism for C ++. It presents the reasoning
        behind the major design decisions and considers their implications for implementation
        alternatives. The mechanism is flexible, comparatively safe and easy to use,
        works in a mixed language execution environment, and can be implemented to
        run efficiently. Two implementation strategies are described in some detail.",
        "venue": "C++ Conference", "year": 1990, "referenceCount": 19, "citationCount":
        64, "influentialCitationCount": 3, "isOpenAccess": false, "openAccessPdf":
        null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category":
        "Computer Science", "source": "external"}, {"category": "Computer Science",
        "source": "s2-fos-model"}, {"category": "Business", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle", "Conference"], "publicationDate": "1990-06-01",
        "journal": {"pages": "149-176"}, "authors": [{"authorId": "2080148697", "name":
        "Andrew Koenig"}, {"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId":
        "6cbe7cd81bd799e04692acbd467c175b5ec00b01", "externalIds": {"DBLP": "books/aw/EllisS90",
        "MAG": "1579278367", "CorpusId": 5073903}, "corpusId": 5073903, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/6cbe7cd81bd799e04692acbd467c175b5ec00b01",
        "title": "The Annotated C++ Reference Manual", "abstract": "Preface. 1. Introduction.
        Overview. Syntax Notation. Evolution of C++. Acknowledgements. 2. Lexical
        Conventions. Tokens. Comments. Identifiers. Keywords. Literals. Implementation
        Dependencies. 3. Basic Concepts. Declarations and Definitions. Scopes. Program
        and Linkage. Start and Termination. Storage Classes. Types. Lvalues. Name
        Spaces. Numerical Limits. 4. Standard Conversions. Integral Promotions. Integral
        Conversions. Float and Double. Floating and Integral. Arithmetic Conversions.
        Pointer Conversions. Reference Conversions. Pointers to Members. Arithmetic
        Conversions. 5. Expressions. Primary Expressions. Postfix Expressions. Unary
        Operators. Explicit Type Conversion. Pointer-to-Member Operators. Multiplicative
        Operators. Additive Operators. Shift Operators. Relational Operators. Equality
        Operators. Bitwise AND Operator. Bitwise Exclusive OR Operator. Bitwise Inclusive
        OR Operator. Logical AND Operator. Logical OR Operator. Conditional Operator.
        Assignment Operators. Comma Operator. Constant Expressions. 6. Statements.
        Labeled Statement. Expression Statement. Compound Statement, or Block. Selection
        Statements. Iteration Statements. Jump Statements. Declaration Statement.
        Ambiguity Resolution. 7. Declarations. Specifiers. Enumeration Declarations.
        Asm Declarations. Linkage Specifications. Linkage Specifications. Type-safe
        Linkage. Limitations. 8. Declarators. Type Names Meaning of Declarators. Function
        Definitions. Initializers. Pointers to Members. 9. Classes. Class Names. Class
        Members. Member Functions. Static Members. Unions. Bit-Fields. Nested Class
        Declarations. Local Class Declarations. Local Type Names. Interfaces. 10.
        Derived Classes. Multiple Base Classes. Virtual Functions. Abstract Classes.
        Summary of Scope Rules. Single Inheritance. Multiple Inheritance. Multiple
        Inheritance and Casting. Multiple Inheritance and Implicit Conversion. Virtual
        Base Classes. Virtual Base Classes and Casting. Single Inheritance and Virtual
        Functions. Multiple Inheritance and Virtual Functions. Instantiation of Virtual
        Functions. Virtual Base Classes with Virtual Functions. Renaming. 11. Member
        Access Control. Access Specifiers. Access Specifiers for Base Classes. Access
        Declarations. Friends. Protected Member Access. Access to Virtual Functions.
        Multiple Access. General Ideas. Per Class Protection. Access Control. 12.
        Special Member Functions. Constructors. Temporary Objects. Conversions. Destructors.
        Free Store. Initialization. Constructors and Destructors. Copying Class Objects.
        Temporary Elimination. Access Control and Special Functions. Summary of Member,
        Friend, and Special Functions. 13. Overloading. Declaration Matching. Argument
        Matching. Address of Overload Function. Overloaded Operators. 14. Templates.
        Templates. Class Templates. Type Equivalence. Function Templates. Declarations
        and Definitions. Member Function Templates. Friends. Static Members and Variables.
        15. Exception Handling. Exception Handling. Throwing an Exception. Constructors
        and Destructors. Handling and Exception. Exception Specifications. Special
        Functions. Exceptions and Access. 16. Preprocessing. Phases of Preprocessing.
        Trigraph Sequences. Macro Definition and Expansion. File Inclusion. Conditional
        Compilation. Line Control. Error Directive. Pragmas. Null Directive. Predefined
        Names. C++ Constructs versus #define. Compatibility. Classic C Preprocessing.
        17. Grammar Summary. Keywords. Expressions. Declarations. Declarators. Class.
        Statements. Preprocessor. Templates. Exception. 18. Compatibility. Extensions.
        C++ and ANSI C. Anachronisms. ANSI/ISO Resolutions. Index. 0201514591T04062001",
        "venue": "", "year": 1990, "referenceCount": 0, "citationCount": 1009, "influentialCitationCount":
        49, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Mathematics",
        "Computer Science"], "s2FieldsOfStudy": [{"category": "Mathematics", "source":
        "external"}, {"category": "Computer Science", "source": "external"}, {"category":
        "Computer Science", "source": "s2-fos-model"}], "publicationTypes": ["Review"],
        "publicationDate": null, "journal": {"volume": "", "name": ""}, "authors":
        [{"authorId": "2592319", "name": "M. Ellis"}, {"authorId": "1706320", "name":
        "B. Stroustrup"}]}, {"paperId": "6fa900a129754d636424c6ac7bad6d9e84978f36",
        "externalIds": {"MAG": "60781975", "CorpusId": 59680863}, "corpusId": 59680863,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/6fa900a129754d636424c6ac7bad6d9e84978f36",
        "title": "Exception handling for c++ (revised)", "abstract": null, "venue":
        "", "year": 1990, "referenceCount": 0, "citationCount": 23, "influentialCitationCount":
        1, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}], "publicationTypes": null, "publicationDate": null, "journal":
        {"volume": "", "name": ""}, "authors": [{"authorId": "2080148697", "name":
        "Andrew Koenig"}, {"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId":
        "35a501c412162dba797ce75f857ce58bc55d211c", "externalIds": {"MAG": "1487481831",
        "DBLP": "journals/csys/Stroustrup89b", "CorpusId": 37288191}, "corpusId":
        37288191, "publicationVenue": {"id": "bf54d856-48c2-4e7f-8886-af11bcc10676",
        "name": "Computing Systems", "type": "journal", "alternate_names": ["Comput
        Syst"], "issn": "0895-6340"}, "url": "https://www.semanticscholar.org/paper/35a501c412162dba797ce75f857ce58bc55d211c",
        "title": "Multiple Inheritance for C++", "abstract": "Multiple Inheritance
        is the ability of a class to have more than one base class (super class).
        In a language where multiple inheritance is supported a program can be structured
        as a set of inheritance lattices instead of (just) as a set of inheritance
        trees. This is widely believed to be an important structuring tool. It is
        also widely believed that multiple inheritance complicates a programming language
        significantly, is hard to implement, and is expensive to run. I will demonstrate
        that none of these last three conjectures are true.", "venue": "Computing
        Systems", "year": 1989, "referenceCount": 15, "citationCount": 134, "influentialCitationCount":
        10, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle"], "publicationDate": null, "journal":
        {"volume": "2", "pages": "367-395", "name": "Comput. Syst."}, "authors": [{"authorId":
        "1706320", "name": "B. Stroustrup"}]}, {"paperId": "7386ca6873e002ea50d0f108391f667ab4adbd1a",
        "externalIds": {"DBLP": "journals/csys/Stroustrup89", "MAG": "114620494",
        "CorpusId": 32247305}, "corpusId": 32247305, "publicationVenue": {"id": "bf54d856-48c2-4e7f-8886-af11bcc10676",
        "name": "Computing Systems", "type": "journal", "alternate_names": ["Comput
        Syst"], "issn": "0895-6340"}, "url": "https://www.semanticscholar.org/paper/7386ca6873e002ea50d0f108391f667ab4adbd1a",
        "title": "Parametrized Types for C++", "abstract": "Type parameterization
        is the ability to defrne a type in terms of another, unspecifled, type. Versions
        of the parameterized type may then be created for several particular parameter
        types. A language supporting type parameterization allows specification ofgeneral
        container types such as list, vector, and associative array where the specific
        type of the elements is left as a parameter. Thus, a parameterized class specifies
        an unbounded set of related types; for example: list of int, list of name,
        list of shape, etc. Type parameterization is one way of making a language
        more extensible. In the context of C++, the problems are 1. Can type parameterization
        be easy to use? 2. Can objects of a parameterized type be used as efficiently
        as objects of a \"hand-coded\" type? 3. Can a general form of parameterized
        types be integrated into C++? 4. Can parameterized types be implemented so
        that the compilation and linking speed is similar to that achieved by a compilation
        system that does not support type parameterization? 5. Can such a compilation
        system be simple and portable? @ Computing Systems,Yol.2. No. I . Winter 1989
        55 56 A design is presented for which the answer to all of these questions
        is yes. The implementation of this scheme is a fairly simple extension of
        current C++ implementations. v/ARNING: The scheme for providing parameterized
        types described here is not implemented. It is not part ofthe C++ language,
        nor is there any guarantee that it ever will be.", "venue": "Computing Systems",
        "year": 1989, "referenceCount": 0, "citationCount": 5, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle"], "publicationDate": null, "journal":
        {"volume": "2", "pages": "55-85", "name": "Comput. Syst."}, "authors": [{"authorId":
        "1706320", "name": "B. Stroustrup"}]}, {"paperId": "7a6b0bee8b14bb22464c5fd7098cf41c9fe4d778",
        "externalIds": {"DBLP": "conf/oopsla/BobrowDKS89", "MAG": "75209006", "CorpusId":
        36744968}, "corpusId": 36744968, "publicationVenue": {"id": "de124794-a8b5-43ce-b740-7643c17bb1ea",
        "name": "Conference on Object-Oriented Programming Systems, Languages, and
        Applications", "type": "conference", "alternate_names": ["OOPSLA", "Conf Object-oriented
        Program Syst Lang Appl"]}, "url": "https://www.semanticscholar.org/paper/7a6b0bee8b14bb22464c5fd7098cf41c9fe4d778",
        "title": "Panel: Object-Oriented Languages: Premises and Promises", "abstract":
        null, "venue": "Conference on Object-Oriented Programming Systems, Languages,
        and Applications", "year": 1989, "referenceCount": 0, "citationCount": 0,
        "influentialCitationCount": 0, "isOpenAccess": false, "openAccessPdf": null,
        "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category": "Computer
        Science", "source": "external"}], "publicationTypes": ["JournalArticle", "Conference"],
        "publicationDate": null, "journal": {"pages": "524"}, "authors": [{"authorId":
        "1753394", "name": "D. Bobrow"}, {"authorId": "145734202", "name": "L. Deutsch"},
        {"authorId": "2365209", "name": "G. Kiczales"}, {"authorId": "1706320", "name":
        "B. Stroustrup"}]}, {"paperId": "b176b1368c966f248e906379b831df5d1b51a7c7",
        "externalIds": {"MAG": "2405581803", "DBLP": "conf/c++/Stroustrup88", "CorpusId":
        40737471}, "corpusId": 40737471, "publicationVenue": {"id": "fe8d6f25-5bff-4eb4-b243-424b8b18f278",
        "name": "C++ Conference", "type": "conference", "alternate_names": ["C++",
        "C++ Conf"]}, "url": "https://www.semanticscholar.org/paper/b176b1368c966f248e906379b831df5d1b51a7c7",
        "title": "Parameterized Types for C++", "abstract": "Type parameterization
        is the ability to defrne a type in terms of another, unspecifled, type. Versions
        of the parameterized type may then be created for several particular parameter
        types. A language supporting type parameterization allows specification ofgeneral
        container types such as list, vector, and associative array where the specific
        type of the elements is left as a parameter. Thus, a parameterized class specifies
        an unbounded set of related types; for example: list of int, list of name,
        list of shape, etc. Type parameterization is one way of making a language
        more extensible. In the context of C++, the problems are", "venue": "C++ Conference",
        "year": 1989, "referenceCount": 0, "citationCount": 60, "influentialCitationCount":
        2, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Physics", "source": "s2-fos-model"}], "publicationTypes":
        ["JournalArticle", "Conference"], "publicationDate": "1989-01-03", "journal":
        {"pages": "1-18"}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "4ab04a6cf34213abb4bccaa51c8692d9318ce1a0", "externalIds": {"MAG":
        "2395973173", "DBLP": "journals/csys/Stroustrup88", "CorpusId": 26943568},
        "corpusId": 26943568, "publicationVenue": {"id": "bf54d856-48c2-4e7f-8886-af11bcc10676",
        "name": "Computing Systems", "type": "journal", "alternate_names": ["Comput
        Syst"], "issn": "0895-6340"}, "url": "https://www.semanticscholar.org/paper/4ab04a6cf34213abb4bccaa51c8692d9318ce1a0",
        "title": "Type-Safe Linkage for C++", "abstract": "This paper describes the
        problems involved in generating names for overloaded functions in C++ and
        in linking to C programs. It also discusses how these problems relate to library
        building. It presents a solution that provides a degree of type-safe linkage.
        This eliminates several classes of errors from C++ and allows libraries to
        be composed more freely than has hitherto been possible. Finally the current
        encoding scheme for C++ names is presented.", "venue": "Computing Systems",
        "year": 1988, "referenceCount": 0, "citationCount": 8, "influentialCitationCount":
        1, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Chemistry",
        "Computer Science"], "s2FieldsOfStudy": [{"category": "Chemistry", "source":
        "external"}, {"category": "Computer Science", "source": "external"}, {"category":
        "Computer Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"],
        "publicationDate": null, "journal": {"volume": "1", "pages": "371-403", "name":
        "Comput. Syst."}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "5b4326d758d326c81c3ac84f2a1a155f8b348793", "externalIds": {"MAG":
        "174284365", "DBLP": "conf/c++/LippmanS88", "CorpusId": 44996661}, "corpusId":
        44996661, "publicationVenue": {"id": "fe8d6f25-5bff-4eb4-b243-424b8b18f278",
        "name": "C++ Conference", "type": "conference", "alternate_names": ["C++",
        "C++ Conf"]}, "url": "https://www.semanticscholar.org/paper/5b4326d758d326c81c3ac84f2a1a155f8b348793",
        "title": "Pointers to Class Members in C++", "abstract": null, "venue": "C++
        Conference", "year": 1988, "referenceCount": 0, "citationCount": 3, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}], "publicationTypes": ["JournalArticle", "Conference"], "publicationDate":
        null, "journal": {"pages": "305-326"}, "authors": [{"authorId": "11818235",
        "name": "S. Lippman"}, {"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "de5bf13554dd9c34757700fa27d171277877aea8", "externalIds": {"MAG":
        "2246130719", "CorpusId": 61965602}, "corpusId": 61965602, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/de5bf13554dd9c34757700fa27d171277877aea8",
        "title": "A better C", "abstract": null, "venue": "", "year": 1988, "referenceCount":
        0, "citationCount": 1, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}], "publicationTypes":
        null, "publicationDate": "1988-08-01", "journal": {"volume": "13", "pages":
        "215-216", "name": ""}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "197ad3a0ac052dea3423a8186c9af6cf60a5f130", "externalIds": {"DBLP":
        "conf/c++/Stroustrup87", "CorpusId": 33968321}, "corpusId": 33968321, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/197ad3a0ac052dea3423a8186c9af6cf60a5f130",
        "title": "The Evolution of C++ 1985 to 1987", "abstract": null, "venue": "C++
        Workshop", "year": 1987, "referenceCount": 0, "citationCount": 11, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}], "publicationTypes": ["JournalArticle"], "publicationDate": null,
        "journal": {"pages": "1-22"}, "authors": [{"authorId": "1706320", "name":
        "B. Stroustrup"}]}, {"paperId": "4102972639ba54dd75ccfcd626bcb9cfcaa68d14",
        "externalIds": {"DBLP": "conf/c++/StroustrupS87", "MAG": "49319144", "CorpusId":
        29177443}, "corpusId": 29177443, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/4102972639ba54dd75ccfcd626bcb9cfcaa68d14",
        "title": "A Set of C++ Classes", "abstract": null, "venue": "C++ Workshop",
        "year": 1987, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Mathematics",
        "Computer Science"], "s2FieldsOfStudy": [{"category": "Mathematics", "source":
        "external"}, {"category": "Computer Science", "source": "external"}], "publicationTypes":
        ["JournalArticle"], "publicationDate": null, "journal": {"pages": "417-439"},
        "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}, {"authorId":
        "2432053", "name": "Jonathan E. Shopiro"}]}, {"paperId": "639aedc1ddda36feaeed6640f1f00f8033fe05e0",
        "externalIds": {"MAG": "9030612", "CorpusId": 59684410}, "corpusId": 59684410,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/639aedc1ddda36feaeed6640f1f00f8033fe05e0",
        "title": "The Evolution of C", "abstract": null, "venue": "", "year": 1987,
        "referenceCount": 0, "citationCount": 59, "influentialCitationCount": 3, "isOpenAccess":
        false, "openAccessPdf": null, "fieldsOfStudy": ["Chemistry"], "s2FieldsOfStudy":
        [{"category": "Chemistry", "source": "external"}], "publicationTypes": null,
        "publicationDate": null, "journal": {"volume": "", "name": ""}, "authors":
        [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId": "ae06cfbcd9f75b7c5e26eef56a7e7ea52f71658a",
        "externalIds": {"MAG": "29305110", "CorpusId": 59639839}, "corpusId": 59639839,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/ae06cfbcd9f75b7c5e26eef56a7e7ea52f71658a",
        "title": "A set of c++ classes for co-routine style programming", "abstract":
        null, "venue": "", "year": 1987, "referenceCount": 0, "citationCount": 40,
        "influentialCitationCount": 0, "isOpenAccess": false, "openAccessPdf": null,
        "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category": "Computer
        Science", "source": "external"}], "publicationTypes": null, "publicationDate":
        null, "journal": {"volume": "", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}, {"authorId": "2432053", "name": "Jonathan E. Shopiro"}]},
        {"paperId": "c5a38f242075a938dc760b2ef59e8f59f2a60fe0", "externalIds": {"MAG":
        "1583493689", "DBLP": "conf/ecoop/Stroustrup87", "DOI": "10.1109/52.2020",
        "CorpusId": 15981790}, "corpusId": 15981790, "publicationVenue": {"id": "119227a6-1b94-433e-a52d-8445a387dbbe",
        "name": "IEEE Software", "type": "journal", "alternate_names": ["IEEE Softw"],
        "issn": "0740-7459", "url": "http://www.computer.org/software", "alternate_urls":
        ["http://ieeexplore.ieee.org/servlet/opac?punumber=52"]}, "url": "https://www.semanticscholar.org/paper/c5a38f242075a938dc760b2ef59e8f59f2a60fe0",
        "title": "What is object-oriented programming?", "abstract": "The meaning
        of the term ''object oriented'' is examined in the context of the general-purpose
        programming language C++. This choice is made partly to introduce C++ and
        partly because C++ is one of the few languages that supports data abstraction,
        object-oriented programming, and traditional programming techniques. The support
        of programming paradigms by languages is discussed and four paradigms are
        examined: procedural, data hiding, data abstraction, and object-oriented programming.
        The support of the latter two by C++ is discussed in some detail.<<ETX>>",
        "venue": "IEEE Software", "year": 1987, "referenceCount": 26, "citationCount":
        154, "influentialCitationCount": 2, "isOpenAccess": false, "openAccessPdf":
        null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category":
        "Computer Science", "source": "external"}, {"category": "Computer Science",
        "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"], "publicationDate":
        "1987-06-15", "journal": {"volume": "5", "pages": "10-20", "name": "IEEE Software"},
        "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId":
        "931b53921b5db6c7864303cbe13a5383913de4ff", "externalIds": {"MAG": "2119142209",
        "DBLP": "books/aw/Stroustrup86", "CorpusId": 5058379}, "corpusId": 5058379,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/931b53921b5db6c7864303cbe13a5383913de4ff",
        "title": "The C++ Programming Language, First Edition", "abstract": null,
        "venue": "", "year": 1986, "referenceCount": 0, "citationCount": 137, "influentialCitationCount":
        11, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": null, "publicationDate": null, "journal": null, "authors":
        [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId": "c04e29b09f67158e7c4405ddad18108a1ddecbd4",
        "externalIds": {"DBLP": "journals/software/Stroustrup86", "MAG": "2987803397",
        "DOI": "10.1002/9781118361054.ch3", "CorpusId": 5591827}, "corpusId": 5591827,
        "publicationVenue": {"id": "119227a6-1b94-433e-a52d-8445a387dbbe", "name":
        "IEEE Software", "type": "journal", "alternate_names": ["IEEE Softw"], "issn":
        "0740-7459", "url": "http://www.computer.org/software", "alternate_urls":
        ["http://ieeexplore.ieee.org/servlet/opac?punumber=52"]}, "url": "https://www.semanticscholar.org/paper/c04e29b09f67158e7c4405ddad18108a1ddecbd4",
        "title": "C++ Programming Language", "abstract": "From the Publisher: \nWritten
        by Bjarne Stroustrup, the creator of C, this is the world''s most trusted
        and widely read book on C. \n \nFor this special hardcover edition, two new
        appendixes on locales and standard library exception safety have been added.
        The result is complete, authoritative coverage of the C language, its standard
        library, and key design techniques. Based on the ANSI/ISO C standard, The
        C Programming Language provides current and comprehensive coverage of all
        C language features and standard library components. \n \nFor example: \nabstract
        classes as interfaces class hierarchies for object-oriented programming templates
        as the basis for type-safe generic software exceptions for regular error handling
        namespaces for modularity in large-scale software run-time type identification
        for loosely coupled systems the C subset of C for C compatibility and system-level
        work standard containers and algorithms standard strings, I/O streams, and
        numerics C compatibility, internationalization, and exception safety \nBjarne
        Stroustrup makes C even more accessible to those new to the language, while
        adding advanced information and techniques that even expert C programmers
        will find invaluable.", "venue": "IEEE Software", "year": 1986, "referenceCount":
        9, "citationCount": 7584, "influentialCitationCount": 288, "isOpenAccess":
        false, "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"],
        "publicationDate": null, "journal": {"volume": "3", "pages": "71-72", "name":
        "IEEE Softw."}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "cba93c9362c4bea2e55db5eac1d7f19ef007dea4", "externalIds": {"MAG":
        "2020747877", "DBLP": "journals/sigplan/Stroustrup86a", "DOI": "10.1145/323779.323774",
        "CorpusId": 5602647}, "corpusId": 5602647, "publicationVenue": null, "url":
        "https://www.semanticscholar.org/paper/cba93c9362c4bea2e55db5eac1d7f19ef007dea4",
        "title": "An overview of C++ (abstract only)", "abstract": null, "venue":
        "OOPWORK ''86", "year": 1986, "referenceCount": 0, "citationCount": 1, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}], "publicationTypes": ["JournalArticle", "Review"], "publicationDate":
        "1986-10-01", "journal": {"pages": "189"}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "e264da9ced2871d28806b331876c91f76e59f97d",
        "externalIds": {"MAG": "2090642077", "DBLP": "journals/sigplan/Stroustrup86",
        "DOI": "10.1145/323779.323736", "CorpusId": 19103212}, "corpusId": 19103212,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/e264da9ced2871d28806b331876c91f76e59f97d",
        "title": "An overview of C++", "abstract": "C++ is a general purpose programming
        language3 designed to make programming more enjoyable for the serious programmer.
        Except for minor details, C++ is a superset of the C language*. C++ was designed
        to [l] be a better C. [2] support data abstraction. [3] support object-oriented
        programming. This paper describes the features added to C to achieve this.
        In addition to C, the main influences of the design of C++ were Simula67\u2019
        and Algo1684. C++ has been in use for about four years and has been applied
        to mpst branches of systems programming including compiler construction, data
        base management, graphics, image processing, music synthesis, networking,
        numerical software, programming environments, robotics, simulation, and switching.
        It has a highly portable implementation and there are now at least 1500 installations
        including AT&T 3B, DEC VAX, Intel 80286, Motorola 68000, and Amdahl machines
        running UNlXt and other operating systems*.", "venue": "OOPWORK ''86", "year":
        1986, "referenceCount": 5, "citationCount": 79, "influentialCitationCount":
        6, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle", "Review"], "publicationDate": "1986-10-01",
        "journal": {"pages": "7-18"}, "authors": [{"authorId": "1706320", "name":
        "B. Stroustrup"}]}, {"paperId": "2a392967a4edeee3934287fc3352b5feb4d7e427",
        "externalIds": {"MAG": "216545260", "CorpusId": 60332075}, "corpusId": 60332075,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/2a392967a4edeee3934287fc3352b5feb4d7e427",
        "title": "Operator Overloading in C", "abstract": "Operator overloading is
        giving new functionality to an existing operator. It means the behavior of
        operators when applied to objects of a class can be redefined. It is similar
        to overloading functions except the function name is replaced by the keyword
        operator followed by the operator''s symbol. There are 5 operators that are
        forbidden to overload. In the following code fragment, we will overload binary
        + operator for Complex number class object.", "venue": "", "year": 1984, "referenceCount":
        0, "citationCount": 4, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Mathematics",
        "source": "s2-fos-model"}], "publicationTypes": null, "publicationDate": null,
        "journal": {"volume": "", "name": ""}, "authors": [{"authorId": "1706320",
        "name": "B. Stroustrup"}]}, {"paperId": "2a81b35c3bc29d644a2e4ecb615f509a4a8cdb03",
        "externalIds": {"MAG": "197746189", "CorpusId": 60238231}, "corpusId": 60238231,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/2a81b35c3bc29d644a2e4ecb615f509a4a8cdb03",
        "title": "Data abstraction in c", "abstract": null, "venue": "", "year": 1984,
        "referenceCount": 0, "citationCount": 25, "influentialCitationCount": 1, "isOpenAccess":
        false, "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}], "publicationTypes":
        null, "publicationDate": null, "journal": {"volume": "", "name": ""}, "authors":
        [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId": "51b06d367a1f343157ace7b2abec69e7fb42bdbe",
        "externalIds": {"DBLP": "journals/bstj/Stroustrup84", "MAG": "2093037781",
        "DOI": "10.1002/J.1538-7305.1984.TB00061.X", "CorpusId": 33731420}, "corpusId":
        33731420, "publicationVenue": {"id": "d340e797-96af-49bd-bcfa-0b00444b955a",
        "name": "AT&T Bell Laboratories Technical Journal", "type": "journal", "alternate_names":
        ["AT&T Bell Laboratories technical journal", "AT&T Bell Lab tech j", "AT&T
        Bell Lab Tech J"], "issn": "0748-612X", "url": "https://ieeexplore.ieee.org/servlet/opac?punumber=6731004"},
        "url": "https://www.semanticscholar.org/paper/51b06d367a1f343157ace7b2abec69e7fb42bdbe",
        "title": "The UNIX system: Data abstraction in C", "abstract": "C++ is a superset
        of the C programming language; it is fully implemented and has been used for
        nontrivial projects. There are now more than one hundred C++ installations.
        This paper describes the facilities for data abstraction provided in C++.
        These include Simula-like classes providing (optional) data hiding, (optional)
        guaranteed initialization of data structures, (optional) implicit type conversion
        for user-defined types, and (optional) dynamic typing; mechanisms for overloading
        function names and operators; and mechanisms for user-controlled memory management.
        It is shown how a new data type, like complex numbers, can be implemented,
        and how an \u201cobject-based\u201d graphics package can be structured. A
        program using these data abstraction facilities is at least as efficient as
        an equivalent program not using them, and the compiler is faster than older
        C compilers.", "venue": "AT&T Bell Laboratories Technical Journal", "year":
        1984, "referenceCount": 7, "citationCount": 8, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle"], "publicationDate": "1984-10-01", "journal":
        {"volume": "63", "pages": "1701-1732", "name": "AT&T Bell Laboratories Technical
        Journal"}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "97a4c9ff0f1c01e1d17141af984773ef9522f1ff", "externalIds": {"DBLP":
        "journals/spe/Stroustrup83", "MAG": "2075683116", "DOI": "10.1002/spe.4380130205",
        "CorpusId": 7846318}, "corpusId": 7846318, "publicationVenue": {"id": "3da56ce6-4a70-402c-a8b0-7dd39a3273d3",
        "name": "Software, Practice & Experience", "type": "journal", "alternate_names":
        ["Softw  Pract Exp", "Softw Pract  Exp", "Software - Practice and Experience"],
        "issn": "0038-0644", "url": "http://www3.interscience.wiley.com/cgi-bin/jhome/1752",
        "alternate_urls": ["http://www.interscience.wiley.com/jpages/0038-0644/",
        "https://onlinelibrary.wiley.com/journal/1097024X"]}, "url": "https://www.semanticscholar.org/paper/97a4c9ff0f1c01e1d17141af984773ef9522f1ff",
        "title": "Adding classes to the C language: An exercise in language evolution",
        "abstract": "The C language is a fine tool for writing compact and efficient
        programs. It is relatively easy to produce good compilers for, and the number
        of tools available for supporting program\u2010 ming in C is large, especially
        in its \u2018home environment\u2019, the UNM system. However, C''S facilities
        for structuring programs were, until recently, rather limited. To remedy this
        situation, a data abstraction facility, called classes, was added. The class
        concept described here has benefitted from the experience gained through a
        year''s use. It is now in use at close to a hundred installations.", "venue":
        "Software, Practice & Experience", "year": 1983, "referenceCount": 14, "citationCount":
        28, "influentialCitationCount": 0, "isOpenAccess": false, "openAccessPdf":
        null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category":
        "Computer Science", "source": "external"}, {"category": "Computer Science",
        "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle"], "publicationDate":
        "1983-02-01", "journal": {"volume": "13", "name": "Software: Practice and
        Experience"}, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]},
        {"paperId": "251b04c0a7aea5655f7cc4f868d3e2e7ac8edc7e", "externalIds": {"DBLP":
        "journals/spe/Stroustrup82", "MAG": "2063573404", "DOI": "10.1002/spe.4380121103",
        "CorpusId": 36968323}, "corpusId": 36968323, "publicationVenue": {"id": "3da56ce6-4a70-402c-a8b0-7dd39a3273d3",
        "name": "Software, Practice & Experience", "type": "journal", "alternate_names":
        ["Softw  Pract Exp", "Softw Pract  Exp", "Software - Practice and Experience"],
        "issn": "0038-0644", "url": "http://www3.interscience.wiley.com/cgi-bin/jhome/1752",
        "alternate_urls": ["http://www.interscience.wiley.com/jpages/0038-0644/",
        "https://onlinelibrary.wiley.com/journal/1097024X"]}, "url": "https://www.semanticscholar.org/paper/251b04c0a7aea5655f7cc4f868d3e2e7ac8edc7e",
        "title": "An experiment with the interchangeability of processes and monitors",
        "abstract": "Two styles of operating system implementation based on the use
        of monitors and processes, respectively, are identified, and arguments for
        a basic equivalence of these systems despite large stylistic differences are
        presented. The \u2018Lauer\u2010Needham Duality Hypothesis\u2019 states that
        the two styles are equivalent, both in terms of ease of programming and in
        efficiency of the resulting systems. A domain for which the first part of
        this claim holds is outlined, and data affirming the essential equivalence
        of performance within that domain are presented. An operating system based
        on the Cambridge CAP system, called SIMOS, was simulated for a wide range
        of hardware configurations and job loads. SIMOS is written using a module
        concept that allows an individual module to be interpreted as a monitor in
        one run and as a process in another. Runs using a monitor to control access
        to some data can be compared with runs using a process to control access to
        the same data. The throughput and response time for the two styles of system
        were found to be identical in most cases. However, a degradation in response
        time occurred in a process\u2010based system when the job load and the low
        level scheduling policy were poorly matched.", "venue": "Software, Practice
        & Experience", "year": 1982, "referenceCount": 14, "citationCount": 4, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle"], "publicationDate": "1982-11-01", "journal":
        {"volume": "12", "name": "Software: Practice and Experience"}, "authors":
        [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId": "645dcc2de160209d6d547c557348ff9d61b9b619",
        "externalIds": {"DBLP": "journals/sigplan/Stroustrup82", "MAG": "2049566481",
        "DOI": "10.1145/947886.947893", "CorpusId": 6267689}, "corpusId": 6267689,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/645dcc2de160209d6d547c557348ff9d61b9b619",
        "title": "Classes: an abstract data type facility for the C language", "abstract":
        "Language constructs for definition and use of abstract data types ease the
        design and maintenance of large programs. This paper describes the C class
        concept, an extension to the C language providing such constructs. A class
        is defined using standard C data types and functions, and it can itself be
        used as a building block for new classes. A class provides a way of restricting
        access to a data structure to a specific set of functions associated with
        it, without incurring significant overheads at compile time or at run time.The
        C class concept is introduced by small examples of its use, and familiarity
        with the C language [2] is assumed. Appendix A is a complete small C program
        using classes.Classes have been in use for more than a year on a dozen PDP11
        and VAX UNIX systems [1], and they are currently used for a diverse set of
        projects on more than 30 systems. Classes are currently implemented by an
        intermediate pass of the cc compiler, called the class pre-processor, which
        is invoked when the directive #class is found in a C source file. The class
        pre-processor is easily ported to a system with a version of the portable
        C compiler. A Motorola68000 version is in use.", "venue": "SIGP", "year":
        1982, "referenceCount": 0, "citationCount": 41, "influentialCitationCount":
        1, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle"], "publicationDate": null, "journal":
        {"volume": "17", "pages": "42-51", "name": "ACM SIGPLAN Notices"}, "authors":
        [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId": "165514669f7afeb93b3f2b9abfc141c3f82fe625",
        "externalIds": {"DBLP": "journals/spe/Stroustrup81", "MAG": "1971440306",
        "DOI": "10.1002/spe.4380110204", "CorpusId": 27351351}, "corpusId": 27351351,
        "publicationVenue": {"id": "3da56ce6-4a70-402c-a8b0-7dd39a3273d3", "name":
        "Software, Practice & Experience", "type": "journal", "alternate_names": ["Softw  Pract
        Exp", "Softw Pract  Exp", "Software - Practice and Experience"], "issn": "0038-0644",
        "url": "http://www3.interscience.wiley.com/cgi-bin/jhome/1752", "alternate_urls":
        ["http://www.interscience.wiley.com/jpages/0038-0644/", "https://onlinelibrary.wiley.com/journal/1097024X"]},
        "url": "https://www.semanticscholar.org/paper/165514669f7afeb93b3f2b9abfc141c3f82fe625",
        "title": "\u2018Long return\u2019: A technique for improving the efficiency
        of inter\u2010module communication", "abstract": "This paper describes a concept
        called \u2018long return\u2019 for use in inter\u2010module communication
        systems. First an implementation which implies a simplification of\u2014rather
        than an extension of\u2014traditional inter\u2010module communication systems
        is outlined. This implementation allows long returns to be used as an optimization
        technique without violating the commonly accepted principles of system structuring.
        Thereafter an experiment that provides an estimate of the improvements in
        efficiency of a particular operating system is described. In the SIMOS operating
        systems (based on the Cambridge CAP operating system) about 20 per cent of
        all inter\u2010process communication operations can be avoided by using long
        returns, and as a consequence the amount of useful work done in the system
        is typically increased by about 2.0 per cent.", "venue": "Software, Practice
        & Experience", "year": 1981, "referenceCount": 13, "citationCount": 4, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science", "Engineering"], "s2FieldsOfStudy": [{"category": "Computer Science",
        "source": "external"}, {"category": "Engineering", "source": "external"},
        {"category": "Computer Science", "source": "s2-fos-model"}], "publicationTypes":
        ["JournalArticle"], "publicationDate": "1981-02-01", "journal": {"volume":
        "11", "name": "Software: Practice and Experience"}, "authors": [{"authorId":
        "1706320", "name": "B. Stroustrup"}]}, {"paperId": "b2627a73887234f93c687775cf70c995cb70c1ae",
        "externalIds": {"DBLP": "phd/ethos/Stroustrup79", "CorpusId": 36288649}, "corpusId":
        36288649, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/b2627a73887234f93c687775cf70c995cb70c1ae",
        "title": "Communication and control in distributed computer systems", "abstract":
        null, "venue": "", "year": 1979, "referenceCount": 0, "citationCount": 5,
        "influentialCitationCount": 0, "isOpenAccess": false, "openAccessPdf": null,
        "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy": [{"category": "Computer
        Science", "source": "external"}, {"category": "Computer Science", "source":
        "s2-fos-model"}], "publicationTypes": null, "publicationDate": null, "journal":
        null, "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId":
        "29650ba4640ce69c50ed601039beebd668ce051a", "externalIds": {"MAG": "2000466017",
        "DBLP": "journals/sigops/Stroustrup78", "DOI": "10.1145/775323.775330", "CorpusId":
        16956924}, "corpusId": 16956924, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/29650ba4640ce69c50ed601039beebd668ce051a",
        "title": "On unifying module interfaces", "abstract": "This paper presents
        the outline of a uniform interface mechanism for activating different kinds
        of modules, e.g. processes, monitors, and procedures. The usefulness of such
        an interface in the design of modules and in the tuning of a system is discussed.
        The overheads involved in using it are explained, together with some implications
        that its general use has on the system structure.", "venue": "OPSR", "year":
        1978, "referenceCount": 6, "citationCount": 9, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}, {"category": "Computer Science", "source": "s2-fos-model"}],
        "publicationTypes": ["JournalArticle"], "publicationDate": null, "journal":
        {"volume": "12", "pages": "90-98", "name": "ACM SIGOPS Oper. Syst. Rev."},
        "authors": [{"authorId": "1706320", "name": "B. Stroustrup"}]}, {"paperId":
        "4e148ab99b46d8a2177864c817ceeaa8217cfcc5", "externalIds": {"CorpusId": 264024649},
        "corpusId": 264024649, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/4e148ab99b46d8a2177864c817ceeaa8217cfcc5",
        "title": "Runtime Concepts for the C++ Standard Template Library", "abstract":
        "A key benefit of generic programming is its support for producing modules
        with clean separation. In particular, generic algorithms are written to work
        with a wide variety of unmodified types. The Runtime concept idiom extends
        this support by allowing unmodified concrete types to behave in a runtime
        polymorphic manner. In this paper, we describe one implementation of the runtime
        concept idiom, in the domain of the C++ standard template library (STL). We
        describe and measure the performance of runtime-polymorphic analogs of several
        STL algorithms. We augment the runtime concept idiom by employing a dispatch
        mechanism that considers both type and concept information to maximize performance
        when selecting algorithm implementations. We use our implementation to demonstrate
        the effects of different compile-time vs. run-time algorithm selection choices,
        and we indicate where improved language and compiler support would be useful.",
        "venue": "", "year": null, "referenceCount": 17, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "s2-fos-model"}], "publicationTypes":
        null, "publicationDate": null, "journal": null, "authors": [{"authorId": "1707965",
        "name": "P. Pirkelbauer"}, {"authorId": "2577312", "name": "Sean Parent"},
        {"authorId": "34619639", "name": "Mat Marcus"}, {"authorId": "1706320", "name":
        "B. Stroustrup"}]}]}, {"authorId": "2080579310", "externalIds": {}, "url":
        "https://www.semanticscholar.org/author/2080579310", "name": "Bjarne Stroustrup",
        "aliases": null, "affiliations": [], "homepage": null, "paperCount": 1, "citationCount":
        0, "hIndex": 0, "papers": [{"paperId": "ddbd4d20e8f8f9a86f7a7ac48b64f7b151f570ff",
        "externalIds": {"MAG": "1421128827", "CorpusId": 60809381}, "corpusId": 60809381,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/ddbd4d20e8f8f9a86f7a7ac48b64f7b151f570ff",
        "title": "Bahasa pengaturcaraan C", "abstract": "Di sini rujukan jitu dan
        panduan kepada bahasa pengaturcaraan C++ yang direka bentuk dan digunakan
        oleh penulis Bjarne Stroustrup. C++ adalah hasil daripada kajian dan uji kaji
        beberapa tahun di Makmal AT&T Bell untuk mencari pengganti kepada C. Ia digunakan
        dalam kebanyakan projek di Makmal AT&T Bell. C++ adalah superset C yang mengekalkan
        kecekapan dan nota mudah C di samping fasiliti untuk menyemak taip, mengabstrak
        data, operator beban lampau, dan pengaturcaraan orientasi objek. Buku ini
        mengandungi bahan tutorial dan penerangan yang penting bagi mereka yang amat
        berminat untuk belajar C++ dan menyiapkan sesuatu projek. Teks ini ditujukan
        untuk pelajar sains komputer dan pengaturcara profesional yang berkeinginan
        belajar tentang perkembangan mutakhir bahasa pengaturcaraan C.", "venue":
        "", "year": 1997, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}], "publicationTypes": ["Review"], "publicationDate": null, "journal":
        {"volume": "", "name": ""}, "authors": [{"authorId": "2080579310", "name":
        "Bjarne Stroustrup"}, {"authorId": "69989368", "name": "Kasiran Buang"}]}]},
        {"authorId": "2080579299", "externalIds": {"DBLP": ["Bjarne Stroustrup"]},
        "url": "https://www.semanticscholar.org/author/2080579299", "name": "Bjarne
        Stroustrup", "aliases": null, "affiliations": [], "homepage": null, "paperCount":
        1, "citationCount": 11, "hIndex": 1, "papers": [{"paperId": "df5f380b77d7d9377fc2f9944cc6f2b992af065d",
        "externalIds": {"MAG": "2147208722", "DBLP": "conf/acm/Stroustrup85", "DOI":
        "10.1145/320435.320459", "CorpusId": 37652067}, "corpusId": 37652067, "publicationVenue":
        null, "url": "https://www.semanticscholar.org/paper/df5f380b77d7d9377fc2f9944cc6f2b992af065d",
        "title": "A C++ tutorial", "abstract": "This paper describes \u2018C (Tick
        C), a superset of ANSI C that allows high-level, efficient, and machine-independent
        specification of dynamically generated code.", "venue": "ACM ''85", "year":
        1985, "referenceCount": 5, "citationCount": 11, "influentialCitationCount":
        1, "isOpenAccess": true, "openAccessPdf": {"url": "https://dl.acm.org/doi/pdf/10.1145/320435.320459",
        "status": null}, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}, {"category": "Computer
        Science", "source": "s2-fos-model"}], "publicationTypes": ["JournalArticle",
        "Review"], "publicationDate": "1985-10-01", "journal": {"pages": "56-64"},
        "authors": [{"authorId": "2080579299", "name": "Bjarne Stroustrup"}]}]}, {"authorId":
        "2080579312", "externalIds": {}, "url": "https://www.semanticscholar.org/author/2080579312",
        "name": "Bjarne Stroustrup", "aliases": null, "affiliations": [], "homepage":
        null, "paperCount": 1, "citationCount": 24, "hIndex": 1, "papers": [{"paperId":
        "c6de9127f59eca05cefc8d39ace43f427c28b122", "externalIds": {"MAG": "91389821",
        "CorpusId": 59838699}, "corpusId": 59838699, "publicationVenue": null, "url":
        "https://www.semanticscholar.org/paper/c6de9127f59eca05cefc8d39ace43f427c28b122",
        "title": "El lenguaje de programaci\u00f3n C", "abstract": null, "venue":
        "", "year": 1993, "referenceCount": 0, "citationCount": 24, "influentialCitationCount":
        1, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Philosophy"],
        "s2FieldsOfStudy": [{"category": "Philosophy", "source": "external"}], "publicationTypes":
        null, "publicationDate": null, "journal": {"volume": "", "name": ""}, "authors":
        [{"authorId": "2080579312", "name": "Bjarne Stroustrup"}]}]}, {"authorId":
        "2080579307", "externalIds": {}, "url": "https://www.semanticscholar.org/author/2080579307",
        "name": "Bjarne Stroustrup", "aliases": null, "affiliations": [], "homepage":
        null, "paperCount": 1, "citationCount": 0, "hIndex": 0, "papers": [{"paperId":
        "9c8b051a9b007e7f34ded38d5915a5a344bb062c", "externalIds": {"MAG": "1565969272",
        "CorpusId": 178161291}, "corpusId": 178161291, "publicationVenue": null, "url":
        "https://www.semanticscholar.org/paper/9c8b051a9b007e7f34ded38d5915a5a344bb062c",
        "title": "\u6ce8\u89e3C++\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30fb\u30de\u30cb\u30e5\u30a2\u30eb
        : ANSI base document", "abstract": "\u5b57\u53e5\u306b\u95a2\u3059\u308b\u898f\u7d04
        \u57fa\u672c\u6982\u5ff5 \u6a19\u6e96\u5909\u63db \u5f0f \u6587 \u5ba3\u8a00
        \u5ba3\u8a00\u5b50 \u30af\u30e9\u30b9 \u6d3e\u751f\u30af\u30e9\u30b9 \u30e1\u30f3\u30d0\u30fb\u30a2\u30af\u30bb\u30b9\u5236\u5fa1
        \u7279\u6b8a\u306a\u30e1\u30f3\u30d0\u95a2\u6570 \u591a\u91cd\u5b9a\u7fa9
        \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u4f8b\u5916\u51e6\u7406 \u524d\u51e6\u7406
        \u4ed8\u9332\uff08\u6587\u6cd5\u8981\u7d04\uff1b\u4e92\u63db\u6027\uff1b\uff21\uff2e\uff33\uff29\uff0f\uff29\uff33\uff2f\u306e\u6c7a\u8b70\uff09",
        "venue": "", "year": 1993, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [{"category": "Physics", "source": "s2-fos-model"}], "publicationTypes": null,
        "publicationDate": null, "journal": {"volume": "", "name": ""}, "authors":
        [{"authorId": "2059005535", "name": "Margaret A. Ellis"}, {"authorId": "2080579307",
        "name": "Bjarne Stroustrup"}, {"authorId": "69434891", "name": "\u8db3\u7acb
        \u9ad8\u5fb3"}, {"authorId": "101500933", "name": "\u5c0f\u5c71 \u88d5\u53f8"}]}]},
        {"authorId": "2080579290", "externalIds": {"DBLP": ["Bjarne Stroustrup"]},
        "url": "https://www.semanticscholar.org/author/2080579290", "name": "Bjarne
        Stroustrup", "aliases": null, "affiliations": [], "homepage": null, "paperCount":
        24, "citationCount": 23, "hIndex": 2, "papers": [{"paperId": "0aa4dad156acb8ea22171edbd2c981c2572ec8f2",
        "externalIds": {"MAG": "2496503497", "DOI": "10.3139/9783446439818.002", "CorpusId":
        184458930}, "corpusId": 184458930, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/0aa4dad156acb8ea22171edbd2c981c2572ec8f2",
        "title": "Ein Rundreise durch C++: Die Grundlagen", "abstract": null, "venue":
        "", "year": 2015, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [], "publicationTypes": null, "publicationDate": "2015-04-02", "journal":
        {"volume": "", "pages": "43-65", "name": ""}, "authors": [{"authorId": "2080579290",
        "name": "Bjarne Stroustrup"}]}, {"paperId": "0ec62f1fe08ebc1d501236b60b62f2f9a2d7d6cc",
        "externalIds": {"MAG": "2476467033", "DOI": "10.3139/9783446439818.030", "CorpusId":
        183608008}, "corpusId": 183608008, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/0ec62f1fe08ebc1d501236b60b62f2f9a2d7d6cc",
        "title": "\u00dcberblick \u00fcber die Standardbibliothek", "abstract": null,
        "venue": "", "year": 2015, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [], "publicationTypes": null, "publicationDate": "2015-04-02", "journal":
        {"volume": "", "pages": "923-953", "name": ""}, "authors": [{"authorId": "2080579290",
        "name": "Bjarne Stroustrup"}]}, {"paperId": "1cb4a064bf209aef5409f71ab639b10caae71923",
        "externalIds": {"MAG": "2495163444", "DOI": "10.3139/9783446439832.006", "CorpusId":
        183787426}, "corpusId": 183787426, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/1cb4a064bf209aef5409f71ab639b10caae71923",
        "title": "\u00dcberblick \u00fcber die Bibliothek", "abstract": null, "venue":
        "", "year": 2015, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [], "publicationTypes": null, "publicationDate": "2015-06-08", "journal":
        {"volume": "", "pages": "75-78", "name": ""}, "authors": [{"authorId": "2080579290",
        "name": "Bjarne Stroustrup"}, {"authorId": "146721914", "name": "Frank Langenau"}]},
        {"paperId": "26783fd7bc3b180d062fe606a6a411e2d20267ba", "externalIds": {"MAG":
        "2505025695", "DOI": "10.3139/9783446439818.006", "CorpusId": 185554892},
        "corpusId": 185554892, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/26783fd7bc3b180d062fe606a6a411e2d20267ba",
        "title": "Typen und Deklarationen", "abstract": null, "venue": "", "year":
        2015, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [], "publicationTypes": null, "publicationDate": "2015-04-02", "journal":
        {"volume": "", "pages": "145-186", "name": ""}, "authors": [{"authorId": "2080579290",
        "name": "Bjarne Stroustrup"}]}, {"paperId": "2b7a02e1bde4fe0d959eec65e8ab3fb8cca7f6d4",
        "externalIds": {"MAG": "2476275064", "DOI": "10.3139/9783446439832.014", "CorpusId":
        184215380}, "corpusId": 184215380, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/2b7a02e1bde4fe0d959eec65e8ab3fb8cca7f6d4",
        "title": "Geschichte und Kompatibilit\u00e4t", "abstract": null, "venue":
        "", "year": 2015, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [], "publicationTypes": null, "publicationDate": "2015-06-08", "journal":
        {"volume": "", "pages": "163-182", "name": ""}, "authors": [{"authorId": "2080579290",
        "name": "Bjarne Stroustrup"}, {"authorId": "146721914", "name": "Frank Langenau"}]},
        {"paperId": "2cdb9aa0b4c87aa093fcf3006f4a9598d4c4f6ba", "externalIds": {"MAG":
        "2497524186", "DOI": "10.3139/9783446439818.034", "CorpusId": 183546179},
        "corpusId": 183546179, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/2cdb9aa0b4c87aa093fcf3006f4a9598d4c4f6ba",
        "title": "Speicher und Ressourcen", "abstract": null, "venue": "", "year":
        2015, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [], "publicationTypes": null, "publicationDate": "2015-04-02", "journal":
        {"volume": "", "pages": "1051-1088", "name": ""}, "authors": [{"authorId":
        "2080579290", "name": "Bjarne Stroustrup"}]}, {"paperId": "2d4c8ddae8942d7d093050b568b96f71e19719a4",
        "externalIds": {"MAG": "2477594936", "DOI": "10.3139/9783446439818.027", "CorpusId":
        63977023}, "corpusId": 63977023, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/2d4c8ddae8942d7d093050b568b96f71e19719a4",
        "title": "Templates und Hierarchien", "abstract": null, "venue": "", "year":
        2015, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [], "publicationTypes": null, "publicationDate": "2015-04-02", "journal":
        {"volume": "", "pages": "821-840", "name": ""}, "authors": [{"authorId": "2080579290",
        "name": "Bjarne Stroustrup"}]}, {"paperId": "4cf1d329869baa3c298ed9e9c877d2a3d7a6f5e7",
        "externalIds": {"MAG": "2484558136", "DOI": "10.3139/9783446439818.029", "CorpusId":
        125081294}, "corpusId": 125081294, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/4cf1d329869baa3c298ed9e9c877d2a3d7a6f5e7",
        "title": "Ein Matrix-Design", "abstract": null, "venue": "", "year": 2015,
        "referenceCount": 0, "citationCount": 0, "influentialCitationCount": 0, "isOpenAccess":
        false, "openAccessPdf": null, "fieldsOfStudy": ["Materials Science"], "s2FieldsOfStudy":
        [{"category": "Materials Science", "source": "external"}], "publicationTypes":
        null, "publicationDate": "2015-04-02", "journal": {"volume": "", "pages":
        "891-921", "name": ""}, "authors": [{"authorId": "2080579290", "name": "Bjarne
        Stroustrup"}]}, {"paperId": "532beccbd91d5da03042b0338f1025367419e474", "externalIds":
        {"MAG": "2479501078", "DOI": "10.3139/9783446439818.018", "CorpusId": 183854274},
        "corpusId": 183854274, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/532beccbd91d5da03042b0338f1025367419e474",
        "title": "\u00dcberladen von Operatoren", "abstract": null, "venue": "", "year":
        2015, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [], "publicationTypes": null, "publicationDate": "2015-04-02", "journal":
        {"volume": "", "pages": "571-593", "name": ""}, "authors": [{"authorId": "2080579290",
        "name": "Bjarne Stroustrup"}]}, {"paperId": "5b74779f7d6305136cd51f2a6e6fb47d6080ed66",
        "externalIds": {"MAG": "2487239343", "DOI": "10.3139/9783446439818.007", "CorpusId":
        183435614}, "corpusId": 183435614, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/5b74779f7d6305136cd51f2a6e6fb47d6080ed66",
        "title": "Zeiger, Arrays und Referenzen", "abstract": null, "venue": "", "year":
        2015, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [], "publicationTypes": null, "publicationDate": "2015-04-02", "journal":
        {"volume": "", "pages": "187-217", "name": ""}, "authors": [{"authorId": "2080579290",
        "name": "Bjarne Stroustrup"}]}, {"paperId": "61b904a0b8f14324c60fef0fd5159a14d373dc94",
        "externalIds": {"MAG": "2484137428", "DOI": "10.3139/9783446439818.004", "CorpusId":
        184237426}, "corpusId": 184237426, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/61b904a0b8f14324c60fef0fd5159a14d373dc94",
        "title": "Eine Rundreise durch C++: Container und Algorithmen", "abstract":
        null, "venue": "", "year": 2015, "referenceCount": 0, "citationCount": 0,
        "influentialCitationCount": 0, "isOpenAccess": false, "openAccessPdf": null,
        "fieldsOfStudy": null, "s2FieldsOfStudy": [], "publicationTypes": null, "publicationDate":
        "2015-04-02", "journal": {"volume": "", "pages": "95-120", "name": ""}, "authors":
        [{"authorId": "2080579290", "name": "Bjarne Stroustrup"}]}, {"paperId": "714e635b153fae033c5745efd50298a0e541f98b",
        "externalIds": {"MAG": "2499730149", "DOI": "10.3139/9783446439818.008", "CorpusId":
        183552784}, "corpusId": 183552784, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/714e635b153fae033c5745efd50298a0e541f98b",
        "title": "Strukturen, Unions und Aufz\u00e4hlungen", "abstract": null, "venue":
        "", "year": 2015, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [], "publicationTypes": null, "publicationDate": "2015-04-02", "journal":
        {"volume": "", "pages": "219-243", "name": ""}, "authors": [{"authorId": "2080579290",
        "name": "Bjarne Stroustrup"}]}, {"paperId": "781eb76e1e435f992d73cd2882788b4274533750",
        "externalIds": {"MAG": "2487649338", "DOI": "10.3139/9783446439832", "CorpusId":
        183801596}, "corpusId": 183801596, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/781eb76e1e435f992d73cd2882788b4274533750",
        "title": "Eine Tour durch C++: Die kurze Einf\u00fchrung in den neuen Standard
        C++ 11", "abstract": null, "venue": "", "year": 2015, "referenceCount": 0,
        "citationCount": 0, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy": [], "publicationTypes":
        null, "publicationDate": "2015-06-08", "journal": {"volume": "", "name": ""},
        "authors": [{"authorId": "2080579290", "name": "Bjarne Stroustrup"}, {"authorId":
        "146721914", "name": "Frank Langenau"}]}, {"paperId": "7fda22bd37d28c58dfaf1f1617f8c2949553912b",
        "externalIds": {"MAG": "2495021278", "DOI": "10.3139/9783446439818.042", "CorpusId":
        64064801}, "corpusId": 64064801, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/7fda22bd37d28c58dfaf1f1617f8c2949553912b",
        "title": "Threads und Tasks", "abstract": null, "venue": "", "year": 2015,
        "referenceCount": 0, "citationCount": 0, "influentialCitationCount": 0, "isOpenAccess":
        false, "openAccessPdf": null, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}], "publicationTypes":
        null, "publicationDate": "2015-04-02", "journal": {"volume": "", "pages":
        "1307-1353", "name": ""}, "authors": [{"authorId": "2080579290", "name": "Bjarne
        Stroustrup"}]}, {"paperId": "80053b05fd785e29bde33b8cd6f6275697a816fc", "externalIds":
        {"MAG": "2490327844", "DOI": "10.3139/9783446439818.015", "CorpusId": 183903874},
        "corpusId": 183903874, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/80053b05fd785e29bde33b8cd6f6275697a816fc",
        "title": "Quelldateien und Programme", "abstract": null, "venue": "", "year":
        2015, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [], "publicationTypes": null, "publicationDate": "2015-04-02", "journal":
        {"volume": "", "pages": "455-483", "name": ""}, "authors": [{"authorId": "2080579290",
        "name": "Bjarne Stroustrup"}]}, {"paperId": "80e090fbc9e6c43e54b3f05900b44e921e898233",
        "externalIds": {"MAG": "2477368257", "DOI": "10.3139/9783446439818.017", "CorpusId":
        183872754}, "corpusId": 183872754, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/80e090fbc9e6c43e54b3f05900b44e921e898233",
        "title": "Konstruieren, Aufr\u00e4umen, Kopieren und Verschieben", "abstract":
        null, "venue": "", "year": 2015, "referenceCount": 0, "citationCount": 0,
        "influentialCitationCount": 0, "isOpenAccess": false, "openAccessPdf": null,
        "fieldsOfStudy": null, "s2FieldsOfStudy": [], "publicationTypes": null, "publicationDate":
        "2015-04-02", "journal": {"volume": "", "pages": "521-569", "name": ""}, "authors":
        [{"authorId": "2080579290", "name": "Bjarne Stroustrup"}]}, {"paperId": "87808815a35722b3aaa654e2625faee0839c19d5",
        "externalIds": {"MAG": "2492129620", "DOI": "10.3139/9783446439832.007", "CorpusId":
        184116892}, "corpusId": 184116892, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/87808815a35722b3aaa654e2625faee0839c19d5",
        "title": "Strings und regul\u00e4re Ausdr\u00fccke", "abstract": null, "venue":
        "", "year": 2015, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [], "publicationTypes": null, "publicationDate": "2015-06-08", "journal":
        {"volume": "", "pages": "79-89", "name": ""}, "authors": [{"authorId": "2080579290",
        "name": "Bjarne Stroustrup"}, {"authorId": "146721914", "name": "Frank Langenau"}]},
        {"paperId": "88809eb30575a32abf762539fbb21a36ea33a108", "externalIds": {"MAG":
        "2477297500", "DOI": "10.3139/9783446439818", "CorpusId": 183001694}, "corpusId":
        183001694, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/88809eb30575a32abf762539fbb21a36ea33a108",
        "title": "Die C++-Programmiersprache: Aktuell zum C++11-Standard", "abstract":
        null, "venue": "", "year": 2015, "referenceCount": 0, "citationCount": 2,
        "influentialCitationCount": 1, "isOpenAccess": true, "openAccessPdf": {"url":
        "http://www3.ub.tu-berlin.de/ihv/000935339.pdf", "status": null}, "fieldsOfStudy":
        ["Mathematics"], "s2FieldsOfStudy": [{"category": "Mathematics", "source":
        "external"}], "publicationTypes": null, "publicationDate": "2015-04-02", "journal":
        {"volume": "", "name": ""}, "authors": [{"authorId": "2080579290", "name":
        "Bjarne Stroustrup"}]}, {"paperId": "b5d5667cc31304814933fa2e8f451d7975496aff",
        "externalIds": {"MAG": "2483222774", "DOI": "10.3139/9783446439818.043", "CorpusId":
        184254255}, "corpusId": 184254255, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/b5d5667cc31304814933fa2e8f451d7975496aff",
        "title": "Die C-Standardbibliothek", "abstract": null, "venue": "", "year":
        2015, "referenceCount": 0, "citationCount": 0, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": null, "s2FieldsOfStudy":
        [], "publicationTypes": null, "publicationDate": "2015-04-02", "journal":
        {"volume": "", "pages": "1355-1369", "name": ""}, "authors": [{"authorId":
        "2080579290", "name": "Bjarne Stroustrup"}]}, {"paperId": "e31ae0f8e9984d5cd2311fcd9b8933152a98b62b",
        "externalIds": {"MAG": "2482738064", "DOI": "10.3139/9783446439818.003", "CorpusId":
        183039526}, "corpusId": 183039526, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/e31ae0f8e9984d5cd2311fcd9b8933152a98b62b",
        "title": "Eine Rundreise durch C++: Abstraktionsmechanismen", "abstract":
        null, "venue": "", "year": 2015, "referenceCount": 0, "citationCount": 0,
        "influentialCitationCount": 0, "isOpenAccess": false, "openAccessPdf": null,
        "fieldsOfStudy": null, "s2FieldsOfStudy": [], "publicationTypes": null, "publicationDate":
        "2015-04-02", "journal": {"volume": "", "pages": "67-94", "name": ""}, "authors":
        [{"authorId": "2080579290", "name": "Bjarne Stroustrup"}]}, {"paperId": "e56f68c93590463a553232e1504930a70f577755",
        "externalIds": {"MAG": "2482084542", "DOI": "10.3139/9783446439818.005", "CorpusId":
        184396650}, "corpusId": 184396650, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/e56f68c93590463a553232e1504930a70f577755",
        "title": "Eine Rundreise durch C++: Nebenl\u00e4ufigkeit und Dienstprogramme",
        "abstract": null, "venue": "", "year": 2015, "referenceCount": 0, "citationCount":
        0, "influentialCitationCount": 0, "isOpenAccess": false, "openAccessPdf":
        null, "fieldsOfStudy": null, "s2FieldsOfStudy": [], "publicationTypes": null,
        "publicationDate": "2015-04-02", "journal": {"volume": "", "pages": "121-144",
        "name": ""}, "authors": [{"authorId": "2080579290", "name": "Bjarne Stroustrup"}]},
        {"paperId": "e6d4c4ecf8c00c55543e7365772d27c7ea69a4a9", "externalIds": {"MAG":
        "2483491185", "DOI": "10.3139/9783446439818.038", "CorpusId": 210071217},
        "corpusId": 210071217, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/e6d4c4ecf8c00c55543e7365772d27c7ea69a4a9",
        "title": "E/A-Streams", "abstract": null, "venue": "", "year": 2015, "referenceCount":
        0, "citationCount": 0, "influentialCitationCount": 0, "isOpenAccess": false,
        "openAccessPdf": null, "fieldsOfStudy": ["Environmental Science"], "s2FieldsOfStudy":
        [{"category": "Environmental Science", "source": "external"}], "publicationTypes":
        null, "publicationDate": "2015-04-02", "journal": {"volume": "", "pages":
        "1159-1197", "name": ""}, "authors": [{"authorId": "2080579290", "name": "Bjarne
        Stroustrup"}, {"authorId": "146721914", "name": "Frank Langenau"}]}, {"paperId":
        "4e5909cb9f8170d16c88fe77841caaa79efd0fc5", "externalIds": {"MAG": "2725121222",
        "DOI": "10.3139/9783446439818.fm", "CorpusId": 195995829}, "corpusId": 195995829,
        "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/4e5909cb9f8170d16c88fe77841caaa79efd0fc5",
        "title": "Die C++-Programmiersprache", "abstract": null, "venue": "", "year":
        2011, "referenceCount": 0, "citationCount": 17, "influentialCitationCount":
        4, "isOpenAccess": true, "openAccessPdf": {"url": "http://www3.ub.tu-berlin.de/ihv/000935339.pdf",
        "status": null}, "fieldsOfStudy": ["Computer Science"], "s2FieldsOfStudy":
        [{"category": "Computer Science", "source": "external"}], "publicationTypes":
        null, "publicationDate": null, "journal": {"volume": "", "name": ""}, "authors":
        [{"authorId": "2080579290", "name": "Bjarne Stroustrup"}]}, {"paperId": "900e54f605ea9221b4da2cfdc8fe69d4bfdcfdf4",
        "externalIds": {"DBLP": "books/daglib/0008402", "CorpusId": 5325640}, "corpusId":
        5325640, "publicationVenue": null, "url": "https://www.semanticscholar.org/paper/900e54f605ea9221b4da2cfdc8fe69d4bfdcfdf4",
        "title": "Die C++ Programmiersprache (2. Aufl.)", "abstract": null, "venue":
        "", "year": 1992, "referenceCount": 0, "citationCount": 4, "influentialCitationCount":
        0, "isOpenAccess": false, "openAccessPdf": null, "fieldsOfStudy": ["Computer
        Science"], "s2FieldsOfStudy": [{"category": "Computer Science", "source":
        "external"}], "publicationTypes": null, "publicationDate": null, "journal":
        {"pages": "I-XX, 1-1068"}, "authors": [{"authorId": "2080579290", "name":
        "Bjarne Stroustrup"}]}]}]}

        '
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Connection:
      - keep-alive
      Content-Length:
      - '267680'
      Content-Type:
      - application/json
      Date:
      - Thu, 19 Oct 2023 18:20:18 GMT
      Via:
      - 1.1 e8977de5589675c37360cfbb1bfac24a.cloudfront.net (CloudFront)
      X-Amz-Cf-Id:
      - 3uwK6mCovoH4pj-D0fCgOZGzQ3wvqX01W9dB-1D3Rmrhn07bphgfQg==
      X-Amz-Cf-Pop:
      - JFK52-P2
      X-Cache:
      - Miss from cloudfront
      x-amz-apigw-id:
      - ND73bGHIvHcFaMA=
      x-amzn-Remapped-Connection:
      - keep-alive
      x-amzn-Remapped-Content-Length:
      - '267680'
      x-amzn-Remapped-Date:
      - Thu, 19 Oct 2023 18:20:18 GMT
      x-amzn-Remapped-Server:
      - gunicorn
      x-amzn-RequestId:
      - e1d87212-62d8-48ff-befd-333006d7eb6c
    status:
      code: 200
      message: OK
version: 1
